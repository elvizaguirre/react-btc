{"ast":null,"code":"import { createContext, useContext, useMemo, useEffect, useLayoutEffect as useLayoutEffect$1, useRef, useState, useCallback, memo, forwardRef, useImperativeHandle } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\nimport { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nfunction getColSpan(column, lastFrozenColumnIndex, args) {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (Number.isInteger(colSpan) && colSpan > 1 && (!column.frozen || column.idx + colSpan - 1 <= lastFrozenColumnIndex)) {\n    return colSpan;\n  }\n  return undefined;\n}\nfunction scrollIntoView(element) {\n  element?.scrollIntoView({\n    inline: 'nearest',\n    block: 'nearest'\n  });\n}\nfunction createCellEvent(event) {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n  return cellEvent;\n}\nconst nonInputKeys = new Set(['Unidentified', 'Alt', 'AltGraph', 'CapsLock', 'Control', 'Fn', 'FnLock', 'Meta', 'NumLock', 'ScrollLock', 'Shift', 'Tab', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'End', 'Home', 'PageDown', 'PageUp', 'Insert', 'ContextMenu', 'Escape', 'Pause', 'Play', 'PrintScreen', 'F1', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12']);\nfunction isCtrlKeyHeldDown(e) {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\nfunction isDefaultCellInput(event) {\n  return !nonInputKeys.has(event.key);\n}\nfunction onEditorNavigation(_ref) {\n  let {\n    key,\n    target\n  } = _ref;\n  if (key === 'Tab' && (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement)) {\n    return target.matches('.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child, .rdg-editor-container > div:only-child > label:only-child > :only-child');\n  }\n  return false;\n}\nconst measuringCellClassname = \"m1l09lto7-0-0-beta-34\";\nfunction renderMeasuringCells(viewportColumns) {\n  return viewportColumns.map(_ref2 => {\n    let {\n      key,\n      idx,\n      minWidth,\n      maxWidth\n    } = _ref2;\n    return /*#__PURE__*/jsx(\"div\", {\n      className: measuringCellClassname,\n      style: {\n        gridColumnStart: idx + 1,\n        minWidth,\n        maxWidth\n      },\n      \"data-measuring-cell-key\": key\n    }, key);\n  });\n}\nfunction isSelectedCellEditable(_ref3) {\n  let {\n    selectedPosition,\n    columns,\n    rows,\n    isGroupRow\n  } = _ref3;\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\nfunction isCellEditable(column, row) {\n  return column.renderEditCell != null && !column.rowGroup && (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false;\n}\nfunction getSelectedCellColSpan(_ref4) {\n  let {\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowIdx,\n    lastFrozenColumnIndex,\n    column,\n    isGroupRow\n  } = _ref4;\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const minRowIdx = -1 - topSummaryRowsCount;\n  if (rowIdx === minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'HEADER'\n    });\n  }\n  if (topSummaryRows && rowIdx > minRowIdx && rowIdx <= topSummaryRowsCount + minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, {\n        type: 'ROW',\n        row\n      });\n    }\n    return;\n  }\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n  return undefined;\n}\nfunction getNextSelectedCellPosition(_ref5) {\n  let {\n    cellNavigationMode,\n    columns,\n    colSpanColumns,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    minRowIdx,\n    maxRowIdx,\n    currentPosition: {\n      idx: currentIdx\n    },\n    nextPosition,\n    lastFrozenColumnIndex,\n    isCellWithinBounds,\n    isGroupRow\n  } = _ref5;\n  let {\n    idx: nextIdx,\n    rowIdx: nextRowIdx\n  } = nextPosition;\n  const setColSpan = moveRight => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n  return {\n    idx: nextIdx,\n    rowIdx: nextRowIdx\n  };\n}\nfunction canExitGrid(_ref6) {\n  let {\n    maxColIdx,\n    minRowIdx,\n    maxRowIdx,\n    selectedPosition: {\n      rowIdx,\n      idx\n    },\n    shiftKey\n  } = _ref6;\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\nconst cell = \"c1wupbe7-0-0-beta-34\";\nconst cellClassname = `rdg-cell ${cell}`;\nconst cellFrozen = \"cd0kgiy7-0-0-beta-34\";\nconst cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\nconst cellFrozenLast = \"c1730fa47-0-0-beta-34\";\nconst cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\nfunction getRowStyle(rowIdx, height) {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    };\n  }\n  return {\n    '--rdg-grid-row-start': rowIdx\n  };\n}\nfunction getCellStyle(column, colSpan) {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\nfunction getCellClassname(column) {\n  for (var _len = arguments.length, extraClasses = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    extraClasses[_key - 1] = arguments[_key];\n  }\n  return clsx(cellClassname, ...extraClasses, column.frozen && cellFrozenClassname, column.isLastFrozenColumn && cellFrozenLastClassname);\n}\nconst {\n  min,\n  max,\n  round,\n  floor,\n  sign,\n  abs\n} = Math;\nfunction assertIsValidKeyGetter(keyGetter) {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\nfunction clampColumnWidth(width, _ref7) {\n  let {\n    minWidth,\n    maxWidth\n  } = _ref7;\n  width = max(width, minWidth);\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n  return width;\n}\nconst checkboxLabel = \"c1hs68w07-0-0-beta-34\";\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\nconst checkboxInput = \"cojpd0n7-0-0-beta-34\";\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\nconst checkbox = \"cwsfieb7-0-0-beta-34\";\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\nconst checkboxLabelDisabled = \"c1fgadbl7-0-0-beta-34\";\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\nfunction renderCheckbox(_ref8) {\n  let {\n    onChange,\n    ...props\n  } = _ref8;\n  function handleChange(e) {\n    onChange(e.target.checked, e.nativeEvent.shiftKey);\n  }\n  return /*#__PURE__*/jsxs(\"label\", {\n    className: clsx(checkboxLabelClassname, props.disabled && checkboxLabelDisabledClassname),\n    children: [/*#__PURE__*/jsx(\"input\", {\n      type: \"checkbox\",\n      ...props,\n      className: checkboxInputClassname,\n      onChange: handleChange\n    }), /*#__PURE__*/jsx(\"div\", {\n      className: checkboxClassname\n    })]\n  });\n}\nconst groupCellContent = \"g1w3c5217-0-0-beta-34\";\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\nconst caret = \"cm5tyhw7-0-0-beta-34\";\nconst caretClassname = `rdg-caret ${caret}`;\nfunction renderToggleGroup(props) {\n  return /*#__PURE__*/jsx(ToggleGroup, {\n    ...props\n  });\n}\nfunction ToggleGroup(_ref9) {\n  let {\n    groupKey,\n    isExpanded,\n    tabIndex,\n    toggleGroup\n  } = _ref9;\n  function handleKeyDown(_ref10) {\n    let {\n      key\n    } = _ref10;\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n  return /*#__PURE__*/jsxs(\"span\", {\n    className: groupCellContentClassname,\n    tabIndex: tabIndex,\n    onKeyDown: handleKeyDown,\n    children: [groupKey, /*#__PURE__*/jsx(\"svg\", {\n      viewBox: \"0 0 14 8\",\n      width: \"14\",\n      height: \"8\",\n      className: caretClassname,\n      \"aria-hidden\": true,\n      children: /*#__PURE__*/jsx(\"path\", {\n        d: d\n      })\n    })]\n  });\n}\nfunction renderValue(props) {\n  try {\n    return props.row[props.column.key];\n  } catch {\n    return null;\n  }\n}\nconst DataGridDefaultRenderersContext = /*#__PURE__*/createContext(undefined);\nconst DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;\nfunction useDefaultRenderers() {\n  return useContext(DataGridDefaultRenderersContext);\n}\nfunction SelectCellFormatter(_ref11) {\n  let {\n    value,\n    tabIndex,\n    disabled,\n    onChange,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy\n  } = _ref11;\n  const renderCheckbox = useDefaultRenderers().renderCheckbox;\n  return renderCheckbox({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    tabIndex,\n    disabled,\n    checked: value,\n    onChange\n  });\n}\nconst RowSelectionContext = /*#__PURE__*/createContext(undefined);\nconst RowSelectionProvider = RowSelectionContext.Provider;\nconst RowSelectionChangeContext = /*#__PURE__*/createContext(undefined);\nconst RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\nfunction useRowSelection() {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\nconst SELECT_COLUMN_KEY = 'select-row';\nfunction HeaderRenderer(props) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n  return /*#__PURE__*/jsx(SelectCellFormatter, {\n    \"aria-label\": \"Select All\",\n    tabIndex: props.tabIndex,\n    value: isRowSelected,\n    onChange: checked => {\n      onRowSelectionChange({\n        type: 'HEADER',\n        checked\n      });\n    }\n  });\n}\nfunction SelectFormatter(props) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n  return /*#__PURE__*/jsx(SelectCellFormatter, {\n    \"aria-label\": \"Select\",\n    tabIndex: props.tabIndex,\n    value: isRowSelected,\n    onChange: (checked, isShiftClick) => {\n      onRowSelectionChange({\n        type: 'ROW',\n        row: props.row,\n        checked,\n        isShiftClick\n      });\n    }\n  });\n}\nfunction SelectGroupFormatter(props) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n  return /*#__PURE__*/jsx(SelectCellFormatter, {\n    \"aria-label\": \"Select Group\",\n    tabIndex: props.tabIndex,\n    value: isRowSelected,\n    onChange: checked => {\n      onRowSelectionChange({\n        type: 'ROW',\n        row: props.row,\n        checked,\n        isShiftClick: false\n      });\n    }\n  });\n}\nconst SelectColumn = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  renderHeaderCell(props) {\n    return /*#__PURE__*/jsx(HeaderRenderer, {\n      ...props\n    });\n  },\n  renderCell(props) {\n    return /*#__PURE__*/jsx(SelectFormatter, {\n      ...props\n    });\n  },\n  renderGroupCell(props) {\n    return /*#__PURE__*/jsx(SelectGroupFormatter, {\n      ...props\n    });\n  }\n};\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\nfunction useCalculatedColumns(_ref12) {\n  let {\n    rawColumns,\n    measuredColumnWidths,\n    resizedColumnWidths,\n    viewportWidth,\n    scrollLeft,\n    defaultColumnOptions,\n    rawGroupBy,\n    enableVirtualization\n  } = _ref12;\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultFormatter = defaultColumnOptions?.renderCell ?? renderValue;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n  const {\n    columns,\n    colSpanColumns,\n    lastFrozenColumnIndex,\n    groupBy\n  } = useMemo(() => {\n    const groupBy = [];\n    let lastFrozenColumnIndex = -1;\n    const columns = rawColumns.map(rawColumn => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      const frozen = rowGroup || rawColumn.frozen || false;\n      const column = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        width: rawColumn.width ?? defaultWidth,\n        minWidth: rawColumn.minWidth ?? defaultMinWidth,\n        maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        renderCell: rawColumn.renderCell ?? defaultFormatter\n      };\n      if (rowGroup) {\n        column.renderGroupCell ??= renderToggleGroup;\n      }\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n      return column;\n    });\n    columns.sort((_ref13, _ref14) => {\n      let {\n        key: aKey,\n        frozen: frozenA\n      } = _ref13;\n      let {\n        key: bKey,\n        frozen: frozenB\n      } = _ref14;\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n      return 0;\n    });\n    const colSpanColumns = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [rawColumns, defaultWidth, defaultMinWidth, defaultMaxWidth, defaultFormatter, defaultResizable, defaultSortable, rawGroupBy]);\n  const {\n    templateColumns,\n    layoutCssVars,\n    totalFrozenColumnWidth,\n    columnMetrics\n  } = useMemo(() => {\n    const columnMetrics = new Map();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns = [];\n    for (const column of columns) {\n      let width = resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width;\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, {\n        width,\n        left\n      });\n      left += width;\n    }\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex]);\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n    const layoutCssVars = {};\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column).left}px`;\n    }\n    return {\n      templateColumns,\n      layoutCssVars,\n      totalFrozenColumnWidth,\n      columnMetrics\n    };\n  }, [measuredColumnWidths, resizedColumnWidths, columns, lastFrozenColumnIndex]);\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo(() => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const {\n        left,\n        width\n      } = columnMetrics.get(columns[colVisibleStartIdx]);\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const {\n        left,\n        width\n      } = columnMetrics.get(columns[colVisibleEndIdx]);\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [columnMetrics, columns, lastFrozenColumnIndex, scrollLeft, totalFrozenColumnWidth, viewportWidth, enableVirtualization]);\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\nconst useLayoutEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect$1;\nfunction useColumnWidths(columns, viewportColumns, templateColumns, gridRef, gridWidth, resizedColumnWidths, measuredColumnWidths, setResizedColumnWidths, setMeasuredColumnWidths, onColumnResize) {\n  const prevGridWidthRef = useRef(gridWidth);\n  const columnsCanFlex = columns.length === viewportColumns.length;\n  const ignorePreviouslyMeasuredColumns = columnsCanFlex && gridWidth !== prevGridWidthRef.current;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure = [];\n  for (const {\n    key,\n    idx,\n    width\n  } of viewportColumns) {\n    if (typeof width === 'string' && (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) && !resizedColumnWidths.has(key)) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n  useLayoutEffect(() => {\n    prevGridWidthRef.current = gridWidth;\n    updateMeasuredWidths(columnsToMeasure);\n  });\n  function updateMeasuredWidths(columnsToMeasure) {\n    if (columnsToMeasure.length === 0) return;\n    setMeasuredColumnWidths(measuredColumnWidths => {\n      const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n      let hasChanges = false;\n      for (const key of columnsToMeasure) {\n        const measuredWidth = measureColumnWidth(gridRef, key);\n        hasChanges ||= measuredWidth !== measuredColumnWidths.get(key);\n        if (measuredWidth === undefined) {\n          newMeasuredColumnWidths.delete(key);\n        } else {\n          newMeasuredColumnWidths.set(key, measuredWidth);\n        }\n      }\n      return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n    });\n  }\n  function handleColumnResize(column, nextWidth) {\n    const {\n      key: resizingKey\n    } = column;\n    const newTemplateColumns = [...templateColumns];\n    const columnsToMeasure = [];\n    for (const {\n      key,\n      idx,\n      width\n    } of viewportColumns) {\n      if (resizingKey === key) {\n        const width = typeof nextWidth === 'number' ? `${nextWidth}px` : nextWidth;\n        newTemplateColumns[idx] = width;\n      } else if (columnsCanFlex && typeof width === 'string' && !resizedColumnWidths.has(key)) {\n        newTemplateColumns[idx] = width;\n        columnsToMeasure.push(key);\n      }\n    }\n    gridRef.current.style.gridTemplateColumns = newTemplateColumns.join(' ');\n    const measuredWidth = typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey);\n    flushSync(() => {\n      setResizedColumnWidths(resizedColumnWidths => {\n        const newResizedColumnWidths = new Map(resizedColumnWidths);\n        newResizedColumnWidths.set(resizingKey, measuredWidth);\n        return newResizedColumnWidths;\n      });\n      updateMeasuredWidths(columnsToMeasure);\n    });\n    onColumnResize?.(column.idx, measuredWidth);\n  }\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  };\n}\nfunction measureColumnWidth(gridRef, key) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}\nfunction useGridDimensions() {\n  const gridRef = useRef(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n  useLayoutEffect(() => {\n    const {\n      ResizeObserver\n    } = window;\n    if (ResizeObserver == null) return;\n    const {\n      clientWidth,\n      clientHeight,\n      offsetWidth,\n      offsetHeight\n    } = gridRef.current;\n    const {\n      width,\n      height\n    } = gridRef.current.getBoundingClientRect();\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - offsetHeight + clientHeight;\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n    const resizeObserver = new ResizeObserver(entries => {\n      const size = entries[0].contentBoxSize[0];\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n      });\n    });\n    resizeObserver.observe(gridRef.current);\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n  return [gridRef, inlineSize, blockSize];\n}\nfunction useLatestFunc(fn) {\n  const ref = useRef(fn);\n  useEffect(() => {\n    ref.current = fn;\n  });\n  const callbackFn = useCallback(function () {\n    ref.current(...arguments);\n  }, []);\n  return fn ? callbackFn : fn;\n}\nfunction useRovingTabIndex(isSelected) {\n  const [isChildFocused, setIsChildFocused] = useState(false);\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n  function onFocus(event) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n  const isFocusable = isSelected && !isChildFocused;\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\nfunction useViewportColumns(_ref15) {\n  let {\n    columns,\n    colSpanColumns,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    isGroupRow\n  } = _ref15;\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n    let startIdx = colOverscanStartIdx;\n    const updateStartIdx = (colIdx, colSpan) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n        type: 'HEADER'\n      }))) {\n        break;\n      }\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n          type: 'ROW',\n          row\n        }))) {\n          break;\n        }\n      }\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n            type: 'SUMMARY',\n            row\n          }))) {\n            break;\n          }\n        }\n      }\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n            type: 'SUMMARY',\n            row\n          }))) {\n            break;\n          }\n        }\n      }\n    }\n    return startIdx;\n  }, [rowOverscanStartIdx, rowOverscanEndIdx, rows, topSummaryRows, bottomSummaryRows, colOverscanStartIdx, lastFrozenColumnIndex, colSpanColumns, isGroupRow]);\n  return useMemo(() => {\n    const viewportColumns = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\nfunction isReadonlyArray(arr) {\n  return Array.isArray(arr);\n}\nfunction useViewportRows(_ref16) {\n  let {\n    rawRows,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    groupBy,\n    rowGrouper,\n    expandedGroupIds,\n    enableVirtualization\n  } = _ref16;\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n    const groupRows = (rows, _ref17, startRowIndex) => {\n      let [groupByKey, ...remainingGroupByKeys] = _ref17;\n      let groupRowsCount = 0;\n      const groups = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        const [childGroups, childRowsCount] = remainingGroupByKeys.length === 0 ? [childRows, childRows.length] : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1);\n        groups[key] = {\n          childRows,\n          childGroups,\n          startRowIndex: startRowIndex + groupRowsCount\n        };\n        groupRowsCount += childRowsCount + 1;\n      }\n      return [groups, groupRowsCount];\n    };\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n  const [rows, isGroupRow] = useMemo(() => {\n    const allGroupRows = new Set();\n    if (!groupedRows) return [rawRows, isGroupRow];\n    const flattenedRows = [];\n    const expandGroup = (rows, parentId, level) => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const {\n          childRows,\n          childGroups,\n          startRowIndex\n        } = rows[groupKey];\n        const groupRow = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n    function isGroupRow(row) {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n  const {\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: rowIdx => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: offset => floor(offset / rowHeight)\n      };\n    }\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    const rowPositions = rows.map(row => {\n      const currentRowHeight = isGroupRow(row) ? rowHeight({\n        type: 'GROUP',\n        row\n      }) : rowHeight({\n        type: 'ROW',\n        row\n      });\n      const position = {\n        top: totalRowHeight,\n        height: currentRowHeight\n      };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n    const validateRowIdx = rowIdx => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: rowIdx => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: rowIdx => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n          if (currentOffset === offset) return middle;\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\nconst cellDragHandle = \"cadd3bp7-0-0-beta-34\";\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\nfunction DragHandle(_ref18) {\n  let {\n    rows,\n    columns,\n    selectedPosition,\n    latestDraggedOverRowIdx,\n    isCellEditable,\n    onRowsChange,\n    onFill,\n    setDragging,\n    setDraggedOverRowIdx\n  } = _ref18;\n  function handleMouseDown(event) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n    function onMouseOver(event) {\n      if (event.buttons !== 1) onMouseUp();\n    }\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n    const {\n      rowIdx\n    } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n  function handleDoubleClick(event) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n  function updateRows(startRowIdx, endRowIdx) {\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({\n        rowIdx: i,\n        idx\n      })) {\n        const updatedRow = onFill({\n          columnKey: column.key,\n          sourceRow,\n          targetRow: rows[i]\n        });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, {\n        indexes,\n        column\n      });\n    }\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    className: cellDragHandleClassname,\n    onMouseDown: handleMouseDown,\n    onDoubleClick: handleDoubleClick\n  });\n}\nconst cellEditing = \"c1tngyp17-0-0-beta-34\";\nfunction EditCell(_ref19) {\n  let {\n    column,\n    colSpan,\n    row,\n    rowIdx,\n    onRowChange,\n    closeEditor,\n    onKeyDown,\n    navigate\n  } = _ref19;\n  const frameRequestRef = useRef();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n    addEventListener('mousedown', onWindowCaptureMouseDown, {\n      capture: true\n    });\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, {\n        capture: true\n      });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current);\n  }\n  function handleKeyDown(event) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown({\n        mode: 'EDIT',\n        row,\n        column,\n        rowIdx,\n        navigate() {\n          navigate(event);\n        },\n        onClose\n      }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (event.key === 'Escape') {\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n  function onClose() {\n    let commitChanges = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let shouldFocusCell = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (commitChanges) {\n      onRowChange(row, true, shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n  function onEditorRowChange(row) {\n    let commitChangesAndFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n  const {\n    cellClass\n  } = column;\n  const className = getCellClassname(column, 'rdg-editor-container', typeof cellClass === 'function' ? cellClass(row) : cellClass, !column.editorOptions?.displayCellContent && cellEditing);\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-colspan\": colSpan,\n    \"aria-selected\": true,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onKeyDown: handleKeyDown,\n    onMouseDownCapture: cancelFrameRequest,\n    children: column.renderEditCell != null && /*#__PURE__*/jsxs(Fragment, {\n      children: [column.renderEditCell({\n        column,\n        row,\n        onRowChange: onEditorRowChange,\n        onClose\n      }), column.editorOptions?.displayCellContent && column.renderCell({\n        column,\n        row,\n        isCellEditable: true,\n        tabIndex: -1,\n        onRowChange: onEditorRowChange\n      })]\n    })\n  });\n}\nfunction GroupCell(_ref20) {\n  let {\n    id,\n    groupKey,\n    childRows,\n    isExpanded,\n    isCellSelected,\n    column,\n    row,\n    groupColumnIndex,\n    toggleGroup: toggleGroupWrapper\n  } = _ref20;\n  const {\n    tabIndex,\n    childTabIndex,\n    onFocus\n  } = useRovingTabIndex(isCellSelected);\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-selected\": isCellSelected,\n    tabIndex: tabIndex,\n    className: getCellClassname(column),\n    style: {\n      ...getCellStyle(column),\n      cursor: isLevelMatching ? 'pointer' : 'default'\n    },\n    onClick: isLevelMatching ? toggleGroup : undefined,\n    onFocus: onFocus,\n    children: (!column.rowGroup || groupColumnIndex === column.idx) && column.renderGroupCell?.({\n      groupKey,\n      childRows,\n      column,\n      row,\n      isExpanded,\n      tabIndex: childTabIndex,\n      toggleGroup\n    })\n  }, column.key);\n}\nconst GroupCell$1 = /*#__PURE__*/memo(GroupCell);\nconst row = \"r1otpg647-0-0-beta-34\";\nconst rowClassname = `rdg-row ${row}`;\nconst rowSelected = \"rel5gk27-0-0-beta-34\";\nconst rowSelectedClassname = 'rdg-row-selected';\nconst rowSelectedWithFrozenCell = \"r1qymf1z7-0-0-beta-34\";\nconst groupRow = \"gyxx7e97-0-0-beta-34\";\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\nfunction GroupedRow(_ref21) {\n  let {\n    id,\n    groupKey,\n    viewportColumns,\n    childRows,\n    rowIdx,\n    row,\n    gridRowStart,\n    height,\n    level,\n    isExpanded,\n    selectedCellIdx,\n    isRowSelected,\n    selectGroup,\n    toggleGroup,\n    ...props\n  } = _ref21;\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n  return /*#__PURE__*/jsx(RowSelectionProvider, {\n    value: isRowSelected,\n    children: /*#__PURE__*/jsx(\"div\", {\n      role: \"row\",\n      \"aria-level\": level,\n      \"aria-expanded\": isExpanded,\n      className: clsx(rowClassname, groupRowClassname, `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, selectedCellIdx === -1 && rowSelectedClassname),\n      onClick: handleSelectGroup,\n      style: getRowStyle(gridRowStart, height),\n      ...props,\n      children: viewportColumns.map(column => /*#__PURE__*/jsx(GroupCell$1, {\n        id: id,\n        groupKey: groupKey,\n        childRows: childRows,\n        isExpanded: isExpanded,\n        isCellSelected: selectedCellIdx === column.idx,\n        column: column,\n        row: row,\n        groupColumnIndex: idx,\n        toggleGroup: toggleGroup\n      }, column.key))\n    })\n  });\n}\nconst GroupRowRenderer = /*#__PURE__*/memo(GroupedRow);\nconst headerSortCell = \"hizp7y17-0-0-beta-34\";\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\nconst headerSortName = \"h14cojrm7-0-0-beta-34\";\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\nfunction renderHeaderCell(_ref22) {\n  let {\n    column,\n    sortDirection,\n    priority,\n    onSort,\n    tabIndex\n  } = _ref22;\n  if (!column.sortable) return column.name;\n  return /*#__PURE__*/jsx(SortableHeaderCell, {\n    onSort: onSort,\n    sortDirection: sortDirection,\n    priority: priority,\n    tabIndex: tabIndex,\n    children: column.name\n  });\n}\nfunction SortableHeaderCell(_ref23) {\n  let {\n    onSort,\n    sortDirection,\n    priority,\n    children,\n    tabIndex\n  } = _ref23;\n  const renderSortStatus = useDefaultRenderers().renderSortStatus;\n  function handleKeyDown(event) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n  function handleClick(event) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n  return /*#__PURE__*/jsxs(\"span\", {\n    tabIndex: tabIndex,\n    className: headerSortCellClassname,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown,\n    children: [/*#__PURE__*/jsx(\"span\", {\n      className: headerSortNameClassname,\n      children: children\n    }), /*#__PURE__*/jsx(\"span\", {\n      children: renderSortStatus({\n        sortDirection,\n        priority\n      })\n    })]\n  });\n}\nconst cellResizable = \"celq7o97-0-0-beta-34\";\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\nfunction HeaderCell(_ref24) {\n  let {\n    column,\n    colSpan,\n    isCellSelected,\n    onColumnResize,\n    sortColumns,\n    onSortColumnsChange,\n    selectCell,\n    shouldFocusGrid,\n    direction\n  } = _ref24;\n  const isRtl = direction === 'rtl';\n  const {\n    tabIndex,\n    childTabIndex,\n    onFocus\n  } = useRovingTabIndex(isCellSelected);\n  const sortIndex = sortColumns?.findIndex(sort => sort.columnKey === column.key);\n  const sortColumn = sortIndex !== undefined && sortIndex > -1 ? sortColumns[sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns.length > 1 ? sortIndex + 1 : undefined;\n  const ariaSort = sortDirection && !priority ? sortDirection === 'ASC' ? 'ascending' : 'descending' : undefined;\n  const className = getCellClassname(column, column.headerCellClass, column.resizable && cellResizableClassname);\n  const renderHeaderCell$1 = column.renderHeaderCell ?? renderHeaderCell;\n  function onPointerDown(event) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n    const {\n      currentTarget,\n      pointerId\n    } = event;\n    const {\n      right,\n      left\n    } = currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n    if (offset > 11) {\n      return;\n    }\n    function onPointerMove(event) {\n      event.preventDefault();\n      const {\n        right,\n        left\n      } = currentTarget.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, clampColumnWidth(width, column));\n      }\n    }\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n  function onSort(ctrlClick) {\n    if (onSortColumnsChange == null) return;\n    const {\n      sortDescendingFirst\n    } = column;\n    if (sortColumn === undefined) {\n      const nextSort = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn;\n      if (sortDescendingFirst === true && sortDirection === 'DESC' || sortDescendingFirst !== true && sortDirection === 'ASC') {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns];\n        if (nextSortColumn) {\n          nextSortColumns[sortIndex] = nextSortColumn;\n        } else {\n          nextSortColumns.splice(sortIndex, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n  function onClick() {\n    selectCell(column.idx);\n  }\n  function onDoubleClick(event) {\n    const {\n      right,\n      left\n    } = event.currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n    if (offset > 11) {\n      return;\n    }\n    onColumnResize(column, 'max-content');\n  }\n  function handleFocus(event) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      selectCell(0);\n    }\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"columnheader\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-selected\": isCellSelected,\n    \"aria-sort\": ariaSort,\n    \"aria-colspan\": colSpan,\n    tabIndex: shouldFocusGrid ? 0 : tabIndex,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onFocus: handleFocus,\n    onClick: onClick,\n    onDoubleClick: column.resizable ? onDoubleClick : undefined,\n    onPointerDown: column.resizable ? onPointerDown : undefined,\n    children: renderHeaderCell$1({\n      column,\n      sortDirection,\n      priority,\n      onSort,\n      tabIndex: childTabIndex\n    })\n  });\n}\nconst headerRow = \"h197vzie7-0-0-beta-34\";\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\nfunction HeaderRow(_ref25) {\n  let {\n    columns,\n    onColumnResize,\n    sortColumns,\n    onSortColumnsChange,\n    lastFrozenColumnIndex,\n    selectedCellIdx,\n    selectCell,\n    shouldFocusGrid,\n    direction\n  } = _ref25;\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'HEADER'\n    });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n    cells.push( /*#__PURE__*/jsx(HeaderCell, {\n      column: column,\n      colSpan: colSpan,\n      isCellSelected: selectedCellIdx === column.idx,\n      onColumnResize: onColumnResize,\n      onSortColumnsChange: onSortColumnsChange,\n      sortColumns: sortColumns,\n      selectCell: selectCell,\n      shouldFocusGrid: shouldFocusGrid && index === 0,\n      direction: direction\n    }, column.key));\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"row\",\n    \"aria-rowindex\": 1,\n    className: clsx(headerRowClassname, selectedCellIdx === -1 && rowSelectedClassname),\n    style: getRowStyle(1),\n    children: cells\n  });\n}\nconst HeaderRow$1 = /*#__PURE__*/memo(HeaderRow);\nconst cellCopied = \"ccpfvsn7-0-0-beta-34\";\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\nconst cellDraggedOver = \"c1bmg16t7-0-0-beta-34\";\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\nfunction Cell(_ref26) {\n  let {\n    column,\n    colSpan,\n    isCellSelected,\n    isCopied,\n    isDraggedOver,\n    row,\n    rowIdx,\n    dragHandle,\n    onClick,\n    onDoubleClick,\n    onContextMenu,\n    onRowChange,\n    selectCell,\n    ...props\n  } = _ref26;\n  const {\n    tabIndex,\n    childTabIndex,\n    onFocus\n  } = useRovingTabIndex(isCellSelected);\n  const {\n    cellClass\n  } = column;\n  const className = getCellClassname(column, typeof cellClass === 'function' ? cellClass(row) : cellClass, isCopied && cellCopiedClassname, isDraggedOver && cellDraggedOverClassname);\n  const isEditable = isCellEditable(column, row);\n  function selectCellWrapper(openEditor) {\n    selectCell({\n      rowIdx,\n      idx: column.idx\n    }, openEditor);\n  }\n  function handleClick(event) {\n    if (onClick) {\n      const cellEvent = createCellEvent(event);\n      onClick({\n        row,\n        column,\n        selectCell: selectCellWrapper\n      }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n  function handleContextMenu(event) {\n    if (onContextMenu) {\n      const cellEvent = createCellEvent(event);\n      onContextMenu({\n        row,\n        column,\n        selectCell: selectCellWrapper\n      }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n  function handleDoubleClick(event) {\n    if (onDoubleClick) {\n      const cellEvent = createCellEvent(event);\n      onDoubleClick({\n        row,\n        column,\n        selectCell: selectCellWrapper\n      }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper(true);\n  }\n  function handleRowChange(newRow) {\n    onRowChange(column, newRow);\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-selected\": isCellSelected,\n    \"aria-colspan\": colSpan,\n    \"aria-readonly\": !isEditable || undefined,\n    tabIndex: tabIndex,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onClick: handleClick,\n    onDoubleClick: handleDoubleClick,\n    onContextMenu: handleContextMenu,\n    onFocus: onFocus,\n    ...props,\n    children: !column.rowGroup && /*#__PURE__*/jsxs(Fragment, {\n      children: [column.renderCell({\n        column,\n        row,\n        isCellEditable: isEditable,\n        tabIndex: childTabIndex,\n        onRowChange: handleRowChange\n      }), dragHandle]\n    })\n  });\n}\nconst Cell$1 = /*#__PURE__*/memo(Cell);\nfunction Row(_ref27, ref) {\n  let {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  } = _ref27;\n  const handleRowChange = useLatestFunc((column, newRow) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n  function handleDragEnter(event) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n  className = clsx(rowClassname, `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, rowClass?.(row, rowIdx), className, selectedCellIdx === -1 && rowSelectedClassname);\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const {\n      idx\n    } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'ROW',\n      row\n    });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n    const isCellSelected = selectedCellIdx === idx;\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push( /*#__PURE__*/jsx(Cell$1, {\n        column: column,\n        colSpan: colSpan,\n        row: row,\n        rowIdx: rowIdx,\n        isCopied: copiedCellIdx === idx,\n        isDraggedOver: draggedOverCellIdx === idx,\n        isCellSelected: isCellSelected,\n        dragHandle: isCellSelected ? selectedCellDragHandle : undefined,\n        onClick: onCellClick,\n        onDoubleClick: onCellDoubleClick,\n        onContextMenu: onCellContextMenu,\n        onRowChange: handleRowChange,\n        selectCell: selectCell\n      }, column.key));\n    }\n  }\n  return /*#__PURE__*/jsx(RowSelectionProvider, {\n    value: isRowSelected,\n    children: /*#__PURE__*/jsx(\"div\", {\n      role: \"row\",\n      ref: ref,\n      className: className,\n      onMouseEnter: handleDragEnter,\n      style: getRowStyle(gridRowStart, height),\n      ...props,\n      children: cells\n    })\n  });\n}\nconst RowComponent = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Row));\nconst RowComponent$1 = RowComponent;\nfunction defaultRenderRow(key, props) {\n  return /*#__PURE__*/jsx(RowComponent, {\n    ...props\n  }, key);\n}\nfunction ScrollToCell(_ref28) {\n  let {\n    scrollToPosition: {\n      idx,\n      rowIdx\n    },\n    gridElement,\n    setScrollToCellPosition\n  } = _ref28;\n  const ref = useRef(null);\n  useLayoutEffect(() => {\n    scrollIntoView(ref.current);\n  });\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridElement,\n      threshold: 1.0\n    });\n    observer.observe(ref.current);\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridElement, setScrollToCellPosition]);\n  return /*#__PURE__*/jsx(\"div\", {\n    ref: ref,\n    style: {\n      gridColumn: idx === undefined ? '1/-1' : idx + 1,\n      gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n    }\n  });\n}\nconst arrow = \"a1mygwml7-0-0-beta-34\";\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\nfunction renderSortStatus(_ref29) {\n  let {\n    sortDirection,\n    priority\n  } = _ref29;\n  return /*#__PURE__*/jsxs(Fragment, {\n    children: [renderSortIcon({\n      sortDirection\n    }), renderSortPriority({\n      priority\n    })]\n  });\n}\nfunction renderSortIcon(_ref30) {\n  let {\n    sortDirection\n  } = _ref30;\n  if (sortDirection === undefined) return null;\n  return /*#__PURE__*/jsx(\"svg\", {\n    viewBox: \"0 0 12 8\",\n    width: \"12\",\n    height: \"8\",\n    className: arrowClassname,\n    \"aria-hidden\": true,\n    children: /*#__PURE__*/jsx(\"path\", {\n      d: sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'\n    })\n  });\n}\nfunction renderSortPriority(_ref31) {\n  let {\n    priority\n  } = _ref31;\n  return priority;\n}\nconst root = \"r104f42s7-0-0-beta-34\";\nconst rootClassname = `rdg ${root}`;\nconst viewportDragging = \"v7ly7s7-0-0-beta-34\";\nconst viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\nconst focusSinkClassname = \"fc4f4zb7-0-0-beta-34\";\nconst summaryCellClassname = \"s1n3hxke7-0-0-beta-34\";\nfunction SummaryCell(_ref32) {\n  let {\n    column,\n    colSpan,\n    row,\n    rowIdx,\n    isCellSelected,\n    selectCell\n  } = _ref32;\n  const {\n    tabIndex,\n    childTabIndex,\n    onFocus\n  } = useRovingTabIndex(isCellSelected);\n  const {\n    summaryCellClass\n  } = column;\n  const className = getCellClassname(column, summaryCellClassname, typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass);\n  function onClick() {\n    selectCell({\n      rowIdx,\n      idx: column.idx\n    });\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-colspan\": colSpan,\n    \"aria-selected\": isCellSelected,\n    tabIndex: tabIndex,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onClick: onClick,\n    onFocus: onFocus,\n    children: column.renderSummaryCell?.({\n      column,\n      row,\n      tabIndex: childTabIndex\n    })\n  });\n}\nconst SummaryCell$1 = /*#__PURE__*/memo(SummaryCell);\nconst summaryRow = \"snfqesz7-0-0-beta-34\";\nconst topSummaryRow = \"t1jijrjz7-0-0-beta-34\";\nconst topSummaryRowBorderClassname = \"t14bmecc7-0-0-beta-34\";\nconst bottomSummaryRowBorderClassname = \"b1odhhml7-0-0-beta-34\";\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\nconst topSummaryRowClassname = `rdg-top-summary-row ${topSummaryRow}`;\nfunction SummaryRow(_ref33) {\n  let {\n    rowIdx,\n    gridRowStart,\n    row,\n    viewportColumns,\n    top,\n    bottom,\n    lastFrozenColumnIndex,\n    selectedCellIdx,\n    isTop,\n    showBorder,\n    selectCell,\n    'aria-rowindex': ariaRowIndex\n  } = _ref33;\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row\n    });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n    const isCellSelected = selectedCellIdx === column.idx;\n    cells.push( /*#__PURE__*/jsx(SummaryCell$1, {\n      column: column,\n      colSpan: colSpan,\n      row: row,\n      rowIdx: rowIdx,\n      isCellSelected: isCellSelected,\n      selectCell: selectCell\n    }, column.key));\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"row\",\n    \"aria-rowindex\": ariaRowIndex,\n    className: clsx(rowClassname, `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, summaryRowClassname, isTop ? [topSummaryRowClassname, showBorder && topSummaryRowBorderClassname] : ['rdg-bottom-summary-row', showBorder && bottomSummaryRowBorderClassname], selectedCellIdx === -1 && rowSelectedClassname),\n    style: {\n      ...getRowStyle(gridRowStart),\n      '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n      '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n    },\n    children: cells\n  });\n}\nconst SummaryRow$1 = /*#__PURE__*/memo(SummaryRow);\nfunction DataGrid(props, ref) {\n  const {\n    columns: rawColumns,\n    rows: rawRows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onCopy,\n    onPaste,\n    enableVirtualization: rawEnableVirtualization,\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction: rawDirection,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  } = props;\n  const defaultRenderers = useDefaultRenderers();\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const renderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const renderSortStatus$1 = renderers?.renderSortStatus ?? defaultRenderers?.renderSortStatus ?? renderSortStatus;\n  const renderCheckbox$1 = renderers?.renderCheckbox ?? defaultRenderers?.renderCheckbox ?? renderCheckbox;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n  const headerRowsCount = 1;\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [resizedColumnWidths, setResizedColumnWidths] = useState(() => new Map());\n  const [measuredColumnWidths, setMeasuredColumnWidths] = useState(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState(() => ({\n    idx: -1,\n    rowIdx: minRowIdx - 1,\n    mode: 'SELECT'\n  }));\n  const [copiedCell, setCopiedCell] = useState(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState(null);\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const rowRef = useRef(null);\n  const shouldFocusCellRef = useRef(false);\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const defaultGridComponents = useMemo(() => ({\n    renderCheckbox: renderCheckbox$1,\n    renderSortStatus: renderSortStatus$1\n  }), [renderCheckbox$1, renderSortStatus$1]);\n  const allRowsSelected = useMemo(() => {\n    const {\n      length\n    } = rawRows;\n    return length !== 0 && selectedRows != null && rowKeyGetter != null && selectedRows.size >= length && rawRows.every(row => selectedRows.has(rowKeyGetter(row)));\n  }, [rawRows, selectedRows, rowKeyGetter]);\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    measuredColumnWidths,\n    resizedColumnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    isGroupRow\n  });\n  const {\n    gridTemplateColumns,\n    handleColumnResize\n  } = useColumnWidths(columns, viewportColumns, templateColumns, gridRef, gridWidth, resizedColumnWidths, measuredColumnWidths, setResizedColumnWidths, setMeasuredColumnWidths, onColumnResize);\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectGroupLatest = useLatestFunc(rowIdx => {\n    selectCell({\n      rowIdx,\n      idx: -1\n    });\n  });\n  const selectHeaderCellLatest = useLatestFunc(idx => {\n    selectCell({\n      rowIdx: minRowIdx,\n      idx\n    });\n  });\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n  useLayoutEffect(() => {\n    if (!selectedCellIsWithinSelectionBounds || isSamePosition(selectedPosition, prevSelectedPosition.current)) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n    prevSelectedPosition.current = selectedPosition;\n    if (selectedPosition.idx === -1) {\n      rowRef.current.focus({\n        preventScroll: true\n      });\n      scrollIntoView(rowRef.current);\n    }\n  });\n  useLayoutEffect(() => {\n    if (!shouldFocusCellRef.current) return;\n    shouldFocusCellRef.current = false;\n    const cell = getCellToScroll(gridRef.current);\n    if (cell === null) return;\n    scrollIntoView(cell);\n    const elementToFocus = cell.querySelector('[tabindex=\"0\"]') ?? cell;\n    elementToFocus.focus({\n      preventScroll: true\n    });\n  });\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToCell(_ref34) {\n      let {\n        idx,\n        rowIdx\n      } = _ref34;\n      const scrollToIdx = idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx = rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({\n          idx: scrollToIdx,\n          rowIdx: scrollToRowIdx\n        });\n      }\n    },\n    selectCell\n  }));\n  const setDraggedOverRowIdx = useCallback(rowIdx => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n  function selectRow(args) {\n    if (!onSelectedRowsChange) return;\n    assertIsValidKeyGetter(rowKeyGetter);\n    if (args.type === 'HEADER') {\n      const newSelectedRows = new Set(selectedRows);\n      for (const row of rawRows) {\n        const rowKey = rowKeyGetter(row);\n        if (args.checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n    const {\n      row,\n      checked,\n      isShiftClick\n    } = args;\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n    onSelectedRowsChange(newSelectedRows);\n  }\n  function toggleGroup(expandedGroupId) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n  function handleKeyDown(event) {\n    const {\n      idx,\n      rowIdx,\n      mode\n    } = selectedPosition;\n    if (mode === 'EDIT') return;\n    const row = rows[rowIdx];\n    if (!isGroupRow(row) && onCellKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown({\n        mode: 'SELECT',\n        row,\n        column: columns[idx],\n        rowIdx,\n        selectCell\n      }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = hasGroups && event.target === rowRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n    const {\n      key,\n      keyCode\n    } = event;\n    if (selectedCellIsWithinViewportBounds && (onPaste != null || onCopy != null) && isCtrlKeyHeldDown(event) && !isGroupRow(rows[rowIdx])) {\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n    if (isRowIdxWithinViewportBounds(rowIdx) && isGroupRow(row) && selectedPosition.idx === -1 && (key === leftKey && row.isExpanded || key === rightKey && !row.isExpanded)) {\n      event.preventDefault();\n      toggleGroup(row.id);\n      return;\n    }\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n  function handleScroll(event) {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n  function getRawRowIdx(rowIdx) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx]) : rowIdx;\n  }\n  function updateRow(column, rowIdx, row) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column\n    });\n  }\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n  function handleCopy() {\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const sourceRow = rawRows[getRawRowIdx(rowIdx)];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({\n      row: sourceRow,\n      columnKey: sourceColumnKey\n    });\n    onCopy?.({\n      sourceRow,\n      sourceColumnKey\n    });\n  }\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n  function handleCellInput(event) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const {\n      key,\n      shiftKey\n    } = event;\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({\n        type: 'ROW',\n        row,\n        checked: !selectedRows.has(rowKey),\n        isShiftClick: false\n      });\n      event.preventDefault();\n      return;\n    }\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(_ref35 => {\n        let {\n          idx,\n          rowIdx\n        } = _ref35;\n        return {\n          idx,\n          rowIdx,\n          mode: 'EDIT',\n          row,\n          originalRow: row\n        };\n      });\n    }\n  }\n  function isColIdxWithinSelectionBounds(idx) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n  function isRowIdxWithinViewportBounds(rowIdx) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n  function isCellWithinSelectionBounds(_ref36) {\n    let {\n      idx,\n      rowIdx\n    } = _ref36;\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n  function isCellWithinViewportBounds(_ref37) {\n    let {\n      idx,\n      rowIdx\n    } = _ref37;\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n  function isCellEditable(position) {\n    return isCellWithinViewportBounds(position) && isSelectedCellEditable({\n      columns,\n      rows,\n      selectedPosition: position,\n      isGroupRow\n    });\n  }\n  function selectCell(position, enableEditor) {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx];\n      setSelectedPosition({\n        ...position,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      });\n    } else if (isSamePosition(selectedPosition, position)) {\n      scrollIntoView(getCellToScroll(gridRef.current));\n    } else {\n      shouldFocusCellRef.current = true;\n      setSelectedPosition({\n        ...position,\n        mode: 'SELECT'\n      });\n    }\n  }\n  function getNextPosition(key, ctrlKey, shiftKey) {\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n    if (key === leftKey && isRowSelected && isGroupRow(row) && !row.isExpanded && row.level !== 0) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return {\n          idx,\n          rowIdx: parentRowIdx\n        };\n      }\n    }\n    switch (key) {\n      case 'ArrowUp':\n        return {\n          idx,\n          rowIdx: rowIdx - 1\n        };\n      case 'ArrowDown':\n        return {\n          idx,\n          rowIdx: rowIdx + 1\n        };\n      case leftKey:\n        return {\n          idx: idx - 1,\n          rowIdx\n        };\n      case rightKey:\n        return {\n          idx: idx + 1,\n          rowIdx\n        };\n      case 'Tab':\n        return {\n          idx: idx + (shiftKey ? -1 : 1),\n          rowIdx\n        };\n      case 'Home':\n        if (isRowSelected) return {\n          idx,\n          rowIdx: 0\n        };\n        return {\n          idx: 0,\n          rowIdx: ctrlKey ? minRowIdx : rowIdx\n        };\n      case 'End':\n        if (isRowSelected) return {\n          idx,\n          rowIdx: rows.length - 1\n        };\n        return {\n          idx: maxColIdx,\n          rowIdx: ctrlKey ? maxRowIdx : rowIdx\n        };\n      case 'PageUp':\n        {\n          if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n          const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n          return {\n            idx,\n            rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0\n          };\n        }\n      case 'PageDown':\n        {\n          if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n          const nextRowY = getRowTop(rowIdx) + clientHeight;\n          return {\n            idx,\n            rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1\n          };\n        }\n      default:\n        return selectedPosition;\n    }\n  }\n  function navigate(event) {\n    const {\n      key,\n      shiftKey\n    } = event;\n    let cellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (canExitGrid({\n        shiftKey,\n        maxColIdx,\n        minRowIdx,\n        maxRowIdx,\n        selectedPosition\n      })) {\n        commitEditorChanges();\n        return;\n      }\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n    event.preventDefault();\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n    selectCell(nextSelectedCellPosition);\n  }\n  function getDraggedOverCellIdx(currentRowIdx) {\n    if (draggedOverRowIdx === undefined) return;\n    const {\n      rowIdx\n    } = selectedPosition;\n    const isDraggedOver = rowIdx < draggedOverRowIdx ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n  function getDragHandle(rowIdx) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'EDIT' || hasGroups || onFill == null) {\n      return;\n    }\n    return /*#__PURE__*/jsx(DragHandle, {\n      rows: rawRows,\n      columns: columns,\n      selectedPosition: selectedPosition,\n      isCellEditable: isCellEditable,\n      latestDraggedOverRowIdx: latestDraggedOverRowIdx,\n      onRowsChange: onRowsChange,\n      onFill: onFill,\n      setDragging: setDragging,\n      setDraggedOverRowIdx: setDraggedOverRowIdx\n    });\n  }\n  function getCellEditor(rowIdx) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n    const {\n      idx,\n      row\n    } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'ROW',\n      row\n    });\n    const closeEditor = shouldFocusCell => {\n      shouldFocusCellRef.current = shouldFocusCell;\n      setSelectedPosition(_ref38 => {\n        let {\n          idx,\n          rowIdx\n        } = _ref38;\n        return {\n          idx,\n          rowIdx,\n          mode: 'SELECT'\n        };\n      });\n    };\n    const onRowChange = (row, commitChanges, shouldFocusCell) => {\n      if (commitChanges) {\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor(shouldFocusCell);\n        });\n      } else {\n        setSelectedPosition(position => ({\n          ...position,\n          row\n        }));\n      }\n    };\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      closeEditor(false);\n    }\n    return /*#__PURE__*/jsx(EditCell, {\n      column: column,\n      colSpan: colSpan,\n      row: row,\n      rowIdx: rowIdx,\n      onRowChange: onRowChange,\n      closeEditor: closeEditor,\n      onKeyDown: onCellKeyDown,\n      navigate: navigate\n    }, column.key);\n  }\n  function getRowViewportColumns(rowIdx) {\n    const selectedColumn = columns[selectedPosition.idx];\n    if (selectedColumn !== undefined && selectedPosition.rowIdx === rowIdx && !viewportColumns.includes(selectedColumn)) {\n      return selectedPosition.idx > colOverscanEndIdx ? [...viewportColumns, selectedColumn] : [...viewportColumns.slice(0, lastFrozenColumnIndex + 1), selectedColumn, ...viewportColumns.slice(lastFrozenColumnIndex + 1)];\n    }\n    return viewportColumns;\n  }\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n    const {\n      idx: selectedIdx,\n      rowIdx: selectedRowIdx\n    } = selectedPosition;\n    const startRowIdx = selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx ? rowOverscanStartIdx - 1 : rowOverscanStartIdx;\n    const endRowIdx = selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx ? rowOverscanEndIdx + 1 : rowOverscanEndIdx;\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport = viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          rowColumns = [selectedColumn];\n        } else {\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      if (isGroupRow(row)) {\n        ({\n          startRowIndex\n        } = row);\n        let isGroupRowSelected = false;\n        if (isSelectable) {\n          assertIsValidKeyGetter(rowKeyGetter);\n          isGroupRowSelected = row.childRows.every(cr => selectedRows.has(rowKeyGetter(cr)));\n        }\n        rowElements.push( /*#__PURE__*/jsx(GroupRowRenderer, {\n          \"aria-level\": row.level + 1,\n          \"aria-setsize\": row.setSize,\n          \"aria-posinset\": row.posInSet + 1,\n          \"aria-rowindex\": headerAndTopSummaryRowsCount + startRowIndex + 1,\n          \"aria-selected\": isSelectable ? isGroupRowSelected : undefined,\n          id: row.id,\n          groupKey: row.groupKey,\n          viewportColumns: rowColumns,\n          childRows: row.childRows,\n          rowIdx: rowIdx,\n          row: row,\n          gridRowStart: gridRowStart,\n          height: getRowHeight(rowIdx),\n          level: row.level,\n          isExpanded: row.isExpanded,\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          isRowSelected: isGroupRowSelected,\n          selectGroup: selectGroupLatest,\n          toggleGroup: toggleGroupLatest\n        }, row.id));\n        continue;\n      }\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n      rowElements.push(renderRow(key, {\n        'aria-rowindex': headerAndTopSummaryRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1,\n        'aria-selected': isSelectable ? isRowSelected : undefined,\n        rowIdx,\n        row,\n        viewportColumns: rowColumns,\n        isRowSelected,\n        onCellClick: onCellClickLatest,\n        onCellDoubleClick: onCellDoubleClickLatest,\n        onCellContextMenu: onCellContextMenuLatest,\n        rowClass,\n        gridRowStart,\n        height: getRowHeight(rowIdx),\n        copiedCellIdx: copiedCell !== null && copiedCell.row === row ? columns.findIndex(c => c.key === copiedCell.columnKey) : undefined,\n        selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n        draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n        setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n        lastFrozenColumnIndex,\n        onRowChange: handleFormatterRowChangeLatest,\n        selectCell: selectCellLatest,\n        selectedCellDragHandle: getDragHandle(rowIdx),\n        selectedCellEditor: getCellEditor(rowIdx)\n      }));\n    }\n    return rowElements;\n  }\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({\n      idx: -1,\n      rowIdx: minRowIdx - 1,\n      mode: 'SELECT'\n    });\n    setDraggedOverRowIdx(undefined);\n  }\n  let templateRows = `${headerRowHeight}px`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  const isGroupRowFocused = selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n  return /*#__PURE__*/jsxs(\"div\", {\n    role: hasGroups ? 'treegrid' : 'grid',\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy,\n    \"aria-multiselectable\": isSelectable ? true : undefined,\n    \"aria-colcount\": columns.length,\n    \"aria-rowcount\": headerRowsCount + rowsCount + summaryRowsCount,\n    className: clsx(rootClassname, className, isDragging && viewportDraggingClassname),\n    style: {\n      ...style,\n      scrollPaddingInlineStart: selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined ? `${totalFrozenColumnWidth}px` : undefined,\n      scrollPaddingBlock: isRowIdxWithinViewportBounds(selectedPosition.rowIdx) || scrollToPosition?.rowIdx !== undefined ? `${headerRowHeight + topSummaryRowsCount * summaryRowHeight}px ${bottomSummaryRowsCount * summaryRowHeight}px` : undefined,\n      gridTemplateColumns,\n      gridTemplateRows: templateRows,\n      '--rdg-header-row-height': `${headerRowHeight}px`,\n      '--rdg-summary-row-height': `${summaryRowHeight}px`,\n      '--rdg-sign': isRtl ? -1 : 1,\n      ...layoutCssVars\n    },\n    dir: direction,\n    ref: gridRef,\n    onScroll: handleScroll,\n    onKeyDown: handleKeyDown,\n    \"data-testid\": testId,\n    children: [hasGroups && /*#__PURE__*/jsx(\"div\", {\n      ref: rowRef,\n      tabIndex: isGroupRowFocused ? 0 : -1,\n      className: clsx(focusSinkClassname, isGroupRowFocused && [rowSelected, lastFrozenColumnIndex !== -1 && rowSelectedWithFrozenCell]),\n      style: {\n        gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n      }\n    }), scrollToPosition !== null && /*#__PURE__*/jsx(ScrollToCell, {\n      scrollToPosition: scrollToPosition,\n      setScrollToCellPosition: setScrollToPosition,\n      gridElement: gridRef.current\n    }), /*#__PURE__*/jsxs(DataGridDefaultRenderersProvider, {\n      value: defaultGridComponents,\n      children: [/*#__PURE__*/jsxs(RowSelectionChangeProvider, {\n        value: selectRowLatest,\n        children: [/*#__PURE__*/jsx(RowSelectionProvider, {\n          value: allRowsSelected,\n          children: /*#__PURE__*/jsx(HeaderRow$1, {\n            columns: getRowViewportColumns(-1),\n            onColumnResize: handleColumnResizeLatest,\n            sortColumns: sortColumns,\n            onSortColumnsChange: onSortColumnsChangeLatest,\n            lastFrozenColumnIndex: lastFrozenColumnIndex,\n            selectedCellIdx: selectedPosition.rowIdx === minRowIdx ? selectedPosition.idx : undefined,\n            selectCell: selectHeaderCellLatest,\n            shouldFocusGrid: !selectedCellIsWithinSelectionBounds,\n            direction: direction\n          })\n        }), rows.length === 0 && noRowsFallback ? noRowsFallback : /*#__PURE__*/jsxs(Fragment, {\n          children: [topSummaryRows?.map((row, rowIdx) => {\n            const gridRowStart = headerRowsCount + rowIdx + 1;\n            const summaryRowIdx = rowIdx + minRowIdx + 1;\n            const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n            const top = headerRowHeight + summaryRowHeight * rowIdx;\n            return /*#__PURE__*/jsx(SummaryRow$1, {\n              \"aria-rowindex\": gridRowStart,\n              rowIdx: summaryRowIdx,\n              gridRowStart: gridRowStart,\n              row: row,\n              top: top,\n              bottom: undefined,\n              viewportColumns: getRowViewportColumns(summaryRowIdx),\n              lastFrozenColumnIndex: lastFrozenColumnIndex,\n              selectedCellIdx: isSummaryRowSelected ? selectedPosition.idx : undefined,\n              isTop: true,\n              showBorder: rowIdx === topSummaryRowsCount - 1,\n              selectCell: selectCellLatest\n            }, rowIdx);\n          }), getViewportRows(), bottomSummaryRows?.map((row, rowIdx) => {\n            const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n            const summaryRowIdx = rows.length + rowIdx;\n            const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n            const top = clientHeight > totalRowHeight ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx) : undefined;\n            const bottom = top === undefined ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx) : undefined;\n            return /*#__PURE__*/jsx(SummaryRow$1, {\n              \"aria-rowindex\": headerAndTopSummaryRowsCount + rowsCount + rowIdx + 1,\n              rowIdx: summaryRowIdx,\n              gridRowStart: gridRowStart,\n              row: row,\n              top: top,\n              bottom: bottom,\n              viewportColumns: getRowViewportColumns(summaryRowIdx),\n              lastFrozenColumnIndex: lastFrozenColumnIndex,\n              selectedCellIdx: isSummaryRowSelected ? selectedPosition.idx : undefined,\n              isTop: false,\n              showBorder: rowIdx === 0,\n              selectCell: selectCellLatest\n            }, rowIdx);\n          })]\n        })]\n      }), renderMeasuringCells(viewportColumns)]\n    })]\n  });\n}\nlet getCellToScrollExpression;\nfunction getCellToScroll(gridEl) {\n  getCellToScrollExpression ??= document.createExpression('div[@role=\"row\"]/div[@tabindex=\"0\"]');\n  return getCellToScrollExpression.evaluate(gridEl, 8).singleNodeValue;\n}\nfunction isSamePosition(p1, p2) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\nconst DataGrid$1 = /*#__PURE__*/forwardRef(DataGrid);\nconst textEditorInternalClassname = \"tlmcuo07-0-0-beta-34\";\nconst textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\nfunction autoFocusAndSelect(input) {\n  input?.focus();\n  input?.select();\n}\nfunction textEditor(_ref39) {\n  let {\n    row,\n    column,\n    onRowChange,\n    onClose\n  } = _ref39;\n  return /*#__PURE__*/jsx(\"input\", {\n    className: textEditorClassname,\n    ref: autoFocusAndSelect,\n    value: row[column.key],\n    onChange: event => onRowChange({\n      ...row,\n      [column.key]: event.target.value\n    }),\n    onBlur: () => onClose(true, false)\n  });\n}\nexport { DataGridDefaultRenderersProvider, RowComponent$1 as Row, SELECT_COLUMN_KEY, SelectCellFormatter, SelectColumn, ToggleGroup, DataGrid$1 as default, renderCheckbox, renderHeaderCell, renderSortIcon, renderSortPriority, renderToggleGroup, renderValue, textEditor, useRowSelection };","map":{"version":3,"names":["getColSpan","column","lastFrozenColumnIndex","args","colSpan","Number","isInteger","frozen","idx","undefined","scrollIntoView","element","inline","block","createCellEvent","event","defaultPrevented","cellEvent","preventGridDefault","isGridDefaultPrevented","Object","setPrototypeOf","getPrototypeOf","nonInputKeys","Set","isCtrlKeyHeldDown","e","ctrlKey","metaKey","key","isDefaultCellInput","has","onEditorNavigation","_ref","target","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","measuringCellClassname","renderMeasuringCells","viewportColumns","map","_ref2","minWidth","maxWidth","jsx","className","style","gridColumnStart","isSelectedCellEditable","_ref3","selectedPosition","columns","rows","isGroupRow","row","rowIdx","isCellEditable","renderEditCell","rowGroup","editable","getSelectedCellColSpan","_ref4","topSummaryRows","bottomSummaryRows","topSummaryRowsCount","length","minRowIdx","type","getNextSelectedCellPosition","_ref5","cellNavigationMode","colSpanColumns","maxRowIdx","currentPosition","currentIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","setColSpan","moveRight","colIdx","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","_ref6","maxColIdx","shiftKey","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","cell","cellClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","getRowStyle","height","getCellStyle","gridColumnEnd","insetInlineStart","getCellClassname","_len","arguments","extraClasses","Array","_key","clsx","isLastFrozenColumn","min","max","round","floor","sign","abs","Math","assertIsValidKeyGetter","keyGetter","Error","clampColumnWidth","width","_ref7","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","renderCheckbox","_ref8","onChange","props","handleChange","checked","nativeEvent","jsxs","disabled","children","groupCellContent","groupCellContentClassname","caret","caretClassname","renderToggleGroup","ToggleGroup","_ref9","groupKey","isExpanded","tabIndex","toggleGroup","handleKeyDown","_ref10","d","onKeyDown","viewBox","renderValue","DataGridDefaultRenderersContext","createContext","DataGridDefaultRenderersProvider","Provider","useDefaultRenderers","useContext","SelectCellFormatter","_ref11","value","ariaLabel","ariaLabelledBy","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","SELECT_COLUMN_KEY","HeaderRenderer","isRowSelected","onRowSelectionChange","SelectFormatter","isShiftClick","SelectGroupFormatter","SelectColumn","name","resizable","sortable","renderHeaderCell","renderCell","renderGroupCell","DEFAULT_COLUMN_WIDTH","DEFAULT_COLUMN_MIN_WIDTH","useCalculatedColumns","_ref12","rawColumns","measuredColumnWidths","resizedColumnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","enableVirtualization","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultFormatter","defaultSortable","defaultResizable","groupBy","useMemo","rawColumn","includes","sort","_ref13","_ref14","aKey","frozenA","bKey","frozenB","indexOf","forEach","push","templateColumns","layoutCssVars","totalFrozenColumnWidth","columnMetrics","Map","left","get","set","columnMetric","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useLayoutEffect","window","useEffect","useLayoutEffect$1","useColumnWidths","gridRef","gridWidth","setResizedColumnWidths","setMeasuredColumnWidths","onColumnResize","prevGridWidthRef","useRef","columnsCanFlex","ignorePreviouslyMeasuredColumns","current","newTemplateColumns","columnsToMeasure","gridTemplateColumns","join","updateMeasuredWidths","newMeasuredColumnWidths","hasChanges","measuredWidth","measureColumnWidth","delete","handleColumnResize","nextWidth","resizingKey","flushSync","newResizedColumnWidths","selector","CSS","escape","measuringCell","querySelector","getBoundingClientRect","useGridDimensions","inlineSize","setInlineSize","useState","blockSize","setBlockSize","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","initialWidth","initialHeight","resizeObserver","entries","size","contentBoxSize","observe","disconnect","useLatestFunc","fn","ref","callbackFn","useCallback","useRovingTabIndex","isSelected","isChildFocused","setIsChildFocused","onFocus","currentTarget","isFocusable","childTabIndex","useViewportColumns","_ref15","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","isReadonlyArray","arr","isArray","useViewportRows","_ref16","rawRows","rowHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","rowsCount","groupRows","_ref17","startRowIndex","groupByKey","remainingGroupByKeys","groupRowsCount","groups","childRows","childGroups","childRowsCount","allGroupRows","flattenedRows","expandGroup","parentId","level","keys","posInSet","id","groupRow","setSize","add","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","cellDragHandle","cellDragHandleClassname","DragHandle","_ref18","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","setDraggedOverRowIdx","handleMouseDown","buttons","addEventListener","onMouseOver","onMouseUp","removeEventListener","handleDragEnd","overRowIdx","endRowIndex","updateRows","handleDoubleClick","stopPropagation","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","columnKey","targetRow","onMouseDown","onDoubleClick","cellEditing","EditCell","_ref19","onRowChange","closeEditor","navigate","frameRequestRef","commitOnOutsideClick","editorOptions","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","mode","commitChanges","shouldFocusCell","onEditorRowChange","commitChangesAndFocus","cellClass","displayCellContent","role","onMouseDownCapture","Fragment","GroupCell","_ref20","isCellSelected","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","onClick","GroupCell$1","memo","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","groupRowClassname","GroupedRow","_ref21","gridRowStart","selectedCellIdx","selectGroup","handleSelectGroup","GroupRowRenderer","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","_ref22","sortDirection","priority","onSort","SortableHeaderCell","_ref23","renderSortStatus","preventDefault","handleClick","cellResizable","cellResizableClassname","HeaderCell","_ref24","sortColumns","onSortColumnsChange","selectCell","shouldFocusGrid","direction","isRtl","sortIndex","findIndex","sortColumn","ariaSort","headerCellClass","renderHeaderCell$1","onPointerDown","pointerType","pointerId","right","clientX","onPointerMove","onLostPointerCapture","setPointerCapture","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","handleFocus","headerRow","headerRowClassname","HeaderRow","_ref25","cells","index","HeaderRow$1","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","_ref26","isCopied","isDraggedOver","dragHandle","onContextMenu","isEditable","selectCellWrapper","openEditor","handleContextMenu","handleRowChange","newRow","Cell$1","Row","_ref27","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","selectedCellDragHandle","onCellClick","onCellDoubleClick","onCellContextMenu","rowClass","onMouseEnter","handleDragEnter","RowComponent","forwardRef","RowComponent$1","defaultRenderRow","ScrollToCell","_ref28","scrollToPosition","gridElement","setScrollToCellPosition","removeScrollToCell","observer","IntersectionObserver","root","threshold","gridColumn","gridRow","arrow","arrowClassname","_ref29","renderSortIcon","renderSortPriority","_ref30","_ref31","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","summaryCellClassname","SummaryCell","_ref32","summaryCellClass","renderSummaryCell","SummaryCell$1","summaryRow","topSummaryRow","topSummaryRowBorderClassname","bottomSummaryRowBorderClassname","summaryRowClassname","topSummaryRowClassname","SummaryRow","_ref33","bottom","isTop","showBorder","ariaRowIndex","SummaryRow$1","DataGrid","rowKeyGetter","rawRowHeight","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onExpandedGroupIdsChange","onCellKeyDown","onScroll","onCopy","onPaste","rawEnableVirtualization","renderers","rawDirection","ariaDescribedBy","testId","defaultRenderers","renderRow","renderSortStatus$1","renderCheckbox$1","noRowsFallback","headerRowsCount","bottomSummaryRowsCount","summaryRowsCount","headerAndTopSummaryRowsCount","setScrollTop","setScrollLeft","setSelectedPosition","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","setScrollToPosition","prevSelectedPosition","lastSelectedRowIdx","rowRef","shouldFocusCellRef","gridHeight","isSelectable","leftKey","rightKey","defaultGridComponents","allRowsSelected","every","hasGroups","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","handleColumnResizeLatest","onSortColumnsChangeLatest","onCellClickLatest","onCellDoubleClickLatest","onCellContextMenuLatest","selectRowLatest","selectRow","handleFormatterRowChangeLatest","updateRow","selectCellLatest","selectGroupLatest","selectHeaderCellLatest","toggleGroupLatest","isSamePosition","focus","preventScroll","getCellToScroll","elementToFocus","useImperativeHandle","scrollToCell","_ref34","scrollToIdx","scrollToRowIdx","isRowIdxWithinViewportBounds","newSelectedRows","rowKey","childRow","previousRowIdx","step","expandedGroupId","newExpandedGroupIds","Element","isCellEvent","closest","isRowEvent","keyCode","cKey","vKey","handleCopy","handlePaste","handleCellInput","handleScroll","getRawRowIdx","rawRowIdx","commitEditorChanges","sourceColumnKey","targetColumn","updatedTargetRow","targetColumnKey","_ref35","originalRow","isColIdxWithinSelectionBounds","_ref36","_ref37","enableEditor","getNextPosition","parentRowIdx","parentRow","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","currentRowIdx","getDragHandle","getCellEditor","_ref38","getRowViewportColumns","selectedColumn","slice","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","isGroupRowSelected","cr","c","templateRows","isGroupRowFocused","scrollPaddingInlineStart","scrollPaddingBlock","dir","summaryRowIdx","isSummaryRowSelected","getCellToScrollExpression","gridEl","document","createExpression","evaluate","singleNodeValue","p1","p2","DataGrid$1","textEditorInternalClassname","textEditorClassname","autoFocusAndSelect","input","select","textEditor","_ref39","onBlur"],"sources":["/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/utils/colSpanUtils.ts","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/utils/domUtils.ts","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/utils/eventUtils.ts","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/utils/keyboardUtils.ts","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/utils/renderMeasuringCells.tsx","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/utils/selectedCellUtils.ts","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/style/cell.ts","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/utils/styleUtils.ts","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/utils/index.ts","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/cellRenderers/renderCheckbox.tsx","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/cellRenderers/renderToggleGroup.tsx","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/cellRenderers/renderValue.tsx","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/DataGridDefaultRenderersProvider.ts","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/cellRenderers/SelectCellFormatter.tsx","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/hooks/useRowSelection.ts","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/Columns.tsx","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/hooks/useCalculatedColumns.ts","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/hooks/useLayoutEffect.ts","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/hooks/useColumnWidths.ts","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/hooks/useGridDimensions.ts","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/hooks/useLatestFunc.ts","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/hooks/useRovingTabIndex.ts","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/hooks/useViewportColumns.ts","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/hooks/useViewportRows.ts","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/DragHandle.tsx","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/EditCell.tsx","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/GroupCell.tsx","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/style/row.ts","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/GroupRow.tsx","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/renderHeaderCell.tsx","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/HeaderCell.tsx","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/HeaderRow.tsx","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/Cell.tsx","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/Row.tsx","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/ScrollToCell.tsx","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/sortStatus.tsx","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/style/core.ts","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/SummaryCell.tsx","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/SummaryRow.tsx","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/DataGrid.tsx","/mnt/ALMACEN/TRABAJO/LAB/react-btc/node_modules/react-data-grid/src/editors/textEditor.tsx"],"sourcesContent":["import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<Element>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n","import type { CellEvent } from '../types';\n\nexport function createCellEvent<E extends React.SyntheticEvent<HTMLDivElement>>(\n  event: E\n): CellEvent<E> {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n\n  return cellEvent;\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return target.matches(\n      '.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child, .rdg-editor-container > div:only-child > label:only-child > :only-child'\n    );\n  }\n  return false;\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>(viewportColumns: readonly CalculatedColumn<R, SR>[]) {\n  return viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n    <div\n      key={key}\n      className={measuringCellClassname}\n      style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n      data-measuring-cell-key={key}\n    />\n  ));\n}\n","import type { CalculatedColumn, CellNavigationMode, GroupRow, Maybe, Position } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.renderEditCell != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nfunction getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column,\n  isGroupRow\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'isGroupRow' | 'lastFrozenColumnIndex'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const minRowIdx = -1 - topSummaryRowsCount;\n  if (rowIdx === minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (topSummaryRows && rowIdx > minRowIdx && rowIdx <= topSummaryRowsCount + minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    }\n    return;\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // Exit the grid if we're at the first or last cell of the grid\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /* max-content does not work with size containment\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\n     * Chromium bug: at odd zoom levels or subpixel positioning, layout/paint containment can make cell borders disappear\n     *   https://bugs.chromium.org/p/chromium/issues/detail?id=1326946\n     */\n    contain: style;\n    position: relative; /* needed for absolute positioning to work */\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: 1px solid var(--rdg-border-color);\n    border-block-end: 1px solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: 2px solid var(--rdg-selection-color);\n      outline-offset: -2px;\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  @layer rdg.Cell {\n    box-shadow: calc(2px * var(--rdg-sign)) 0 5px -2px rgba(136, 136, 136, 0.3);\n  }\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style/cell';\n\nexport function getRowStyle(rowIdx: number, height?: number): CSSProperties {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    } as unknown as CSSProperties;\n  }\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import type { CalculatedColumn } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './eventUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, round, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport type { RenderCheckboxProps } from '../types';\n\nconst checkboxLabel = css`\n  @layer rdg.CheckboxLabel {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    inset: 0;\n    margin-inline-end: 1px; /* align checkbox in row group cell */\n  }\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  @layer rdg.CheckboxInput {\n    all: unset;\n  }\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  @layer rdg.CheckboxIcon {\n    content: '';\n    inline-size: 20px;\n    block-size: 20px;\n    border: 2px solid var(--rdg-border-color);\n    background-color: var(--rdg-background-color);\n\n    .${checkboxInput}:checked + & {\n      background-color: var(--rdg-checkbox-color);\n      outline: 4px solid var(--rdg-background-color);\n      outline-offset: -6px;\n    }\n\n    .${checkboxInput}:focus + & {\n      border-color: var(--rdg-checkbox-focus-color);\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  @layer rdg.CheckboxLabel {\n    cursor: default;\n\n    .${checkbox} {\n      border-color: var(--rdg-checkbox-disabled-border-color);\n      background-color: var(--rdg-checkbox-disabled-background-color);\n    }\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nexport function renderCheckbox({ onChange, ...props }: RenderCheckboxProps) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label\n      className={clsx(checkboxLabelClassname, {\n        [checkboxLabelDisabledClassname]: props.disabled\n      })}\n    >\n      <input\n        type=\"checkbox\"\n        {...props}\n        className={checkboxInputClassname}\n        onChange={handleChange}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderGroupCellProps } from '../types';\n\nconst groupCellContent = css`\n  @layer rdg.GroupCellContent {\n    outline: none;\n  }\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  @layer rdg.GroupCellCaret {\n    margin-inline-start: 4px;\n    stroke: currentColor;\n    stroke-width: 1.5px;\n    fill: transparent;\n    vertical-align: middle;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function renderToggleGroup<R, SR>(props: RenderGroupCellProps<R, SR>) {\n  return <ToggleGroup {...props} />;\n}\n\nexport function ToggleGroup<R, SR>({\n  groupKey,\n  isExpanded,\n  tabIndex,\n  toggleGroup\n}: RenderGroupCellProps<R, SR>) {\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span className={groupCellContentClassname} tabIndex={tabIndex} onKeyDown={handleKeyDown}>\n      {groupKey as string}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import type { RenderCellProps } from '../types';\n\nexport function renderValue<R, SR>(props: RenderCellProps<R, SR>) {\n  try {\n    return props.row[props.column.key as keyof R] as React.ReactNode;\n  } catch {\n    return null;\n  }\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Maybe, Renderers } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultRenderersContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport const DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;\n\nexport function useDefaultRenderers<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultRenderersContext);\n}\n","import type { RenderCheckboxProps } from '../types';\nimport { useDefaultRenderers } from '../DataGridDefaultRenderersProvider';\n\ntype SharedInputProps = Pick<\n  RenderCheckboxProps,\n  'disabled' | 'tabIndex' | 'aria-label' | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const renderCheckbox = useDefaultRenderers()!.renderCheckbox!;\n\n  return renderCheckbox({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    tabIndex,\n    disabled,\n    checked: value,\n    onChange\n  });\n}\n","import { createContext, useContext } from 'react';\n\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, RenderCellProps, RenderGroupCellProps, RenderHeaderCellProps } from './types';\nimport { SelectCellFormatter } from './cellRenderers';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction HeaderRenderer(props: RenderHeaderCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select All\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'HEADER', checked });\n      }}\n    />\n  );\n}\n\nfunction SelectFormatter(props: RenderCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: RenderGroupCellProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  renderHeaderCell(props) {\n    return <HeaderRenderer {...props} />;\n  },\n  renderCell(props) {\n    return <SelectFormatter {...props} />;\n  },\n  renderGroupCell(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n","import { useMemo } from 'react';\n\nimport { clampColumnWidth, max, min } from '../utils';\nimport type { CalculatedColumn, Column, Maybe } from '../types';\nimport { renderToggleGroup, renderValue } from '../cellRenderers';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport type { DataGridProps } from '../DataGrid';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy: Maybe<readonly string[]>;\n  viewportWidth: number;\n  scrollLeft: number;\n  measuredColumnWidths: ReadonlyMap<string, number>;\n  resizedColumnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  measuredColumnWidths,\n  resizedColumnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultFormatter = defaultColumnOptions?.renderCell ?? renderValue;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n    groupBy: readonly string[];\n  } => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        width: rawColumn.width ?? defaultWidth,\n        minWidth: rawColumn.minWidth ?? defaultMinWidth,\n        maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        renderCell: rawColumn.renderCell ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.renderGroupCell ??= renderToggleGroup;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultFormatter,\n    defaultResizable,\n    defaultSortable,\n    rawGroupBy\n  ]);\n\n  const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n\n    for (const column of columns) {\n      let width =\n        resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width;\n\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {};\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [measuredColumnWidths, resizedColumnWidths, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport type { CalculatedColumn, StateSetter } from '../types';\nimport { useLayoutEffect } from './useLayoutEffect';\nimport type { DataGridProps } from '../DataGrid';\n\nexport function useColumnWidths<R, SR>(\n  columns: readonly CalculatedColumn<R, SR>[],\n  viewportColumns: readonly CalculatedColumn<R, SR>[],\n  templateColumns: readonly string[],\n  gridRef: React.RefObject<HTMLDivElement>,\n  gridWidth: number,\n  resizedColumnWidths: ReadonlyMap<string, number>,\n  measuredColumnWidths: ReadonlyMap<string, number>,\n  setResizedColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  setMeasuredColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  onColumnResize: DataGridProps<R, SR>['onColumnResize']\n) {\n  const prevGridWidthRef = useRef(gridWidth);\n  const columnsCanFlex: boolean = columns.length === viewportColumns.length;\n  // Allow columns to flex again when...\n  const ignorePreviouslyMeasuredColumns: boolean =\n    // there is enough space for columns to flex and the grid was resized\n    columnsCanFlex && gridWidth !== prevGridWidthRef.current;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure: string[] = [];\n\n  for (const { key, idx, width } of viewportColumns) {\n    if (\n      typeof width === 'string' &&\n      (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) &&\n      !resizedColumnWidths.has(key)\n    ) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n\n  useLayoutEffect(() => {\n    prevGridWidthRef.current = gridWidth;\n    updateMeasuredWidths(columnsToMeasure);\n  });\n\n  function updateMeasuredWidths(columnsToMeasure: readonly string[]) {\n    if (columnsToMeasure.length === 0) return;\n\n    setMeasuredColumnWidths((measuredColumnWidths) => {\n      const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n      let hasChanges = false;\n\n      for (const key of columnsToMeasure) {\n        const measuredWidth = measureColumnWidth(gridRef, key);\n        hasChanges ||= measuredWidth !== measuredColumnWidths.get(key);\n        if (measuredWidth === undefined) {\n          newMeasuredColumnWidths.delete(key);\n        } else {\n          newMeasuredColumnWidths.set(key, measuredWidth);\n        }\n      }\n\n      return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n    });\n  }\n\n  function handleColumnResize(column: CalculatedColumn<R, SR>, nextWidth: number | 'max-content') {\n    const { key: resizingKey } = column;\n    const newTemplateColumns = [...templateColumns];\n    const columnsToMeasure: string[] = [];\n\n    for (const { key, idx, width } of viewportColumns) {\n      if (resizingKey === key) {\n        const width = typeof nextWidth === 'number' ? `${nextWidth}px` : nextWidth;\n        newTemplateColumns[idx] = width;\n      } else if (columnsCanFlex && typeof width === 'string' && !resizedColumnWidths.has(key)) {\n        newTemplateColumns[idx] = width;\n        columnsToMeasure.push(key);\n      }\n    }\n\n    gridRef.current!.style.gridTemplateColumns = newTemplateColumns.join(' ');\n    const measuredWidth =\n      typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey)!;\n\n    // TODO: remove\n    // need flushSync to keep frozen column offsets in sync\n    // we may be able to use `startTransition` or even `requestIdleCallback` instead\n    flushSync(() => {\n      setResizedColumnWidths((resizedColumnWidths) => {\n        const newResizedColumnWidths = new Map(resizedColumnWidths);\n        newResizedColumnWidths.set(resizingKey, measuredWidth);\n        return newResizedColumnWidths;\n      });\n      updateMeasuredWidths(columnsToMeasure);\n    });\n\n    onColumnResize?.(column.idx, measuredWidth);\n  }\n\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  } as const;\n}\n\nfunction measureColumnWidth(gridRef: React.RefObject<HTMLDivElement>, key: string) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current!.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}\n","import { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions() {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - offsetHeight + clientHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      // we use flushSync here to avoid flashing scrollbars\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n      });\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize] as const;\n}\n","import { useCallback, useEffect, useRef } from 'react';\n\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n","import { useState } from 'react';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingTabIndex(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocusable = isSelected && !isChildFocused;\n\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\n\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, Maybe, RowHeightArgs } from '../types';\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds: Maybe<ReadonlySet<unknown>>;\n  enableVirtualization: boolean;\n}\n\n// TODO: https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    cursor: move;\n    position: absolute;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 8px;\n    block-size: 8px;\n    background-color: var(--rdg-selection-color);\n\n    &:hover {\n      inline-size: 16px;\n      block-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, onEditorNavigation } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellRendererProps,\n  EditCellKeyDownArgs,\n  Maybe,\n  Omit,\n  RenderEditCellProps\n} from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<RenderEditCellProps<R, SR>, 'onRowChange' | 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  rowIdx: number;\n  onRowChange: (row: R, commitChanges: boolean, shouldFocusCell: boolean) => void;\n  closeEditor: (shouldFocusCell: boolean) => void;\n  navigate: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onKeyDown: Maybe<(args: EditCellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown(\n        {\n          mode: 'EDIT',\n          row,\n          column,\n          rowIdx,\n          navigate() {\n            navigate(event);\n          },\n          onClose\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (event.key === 'Escape') {\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n\n  function onClose(commitChanges = false, shouldFocusCell = true) {\n    if (commitChanges) {\n      onRowChange(row, true, shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n\n  function onEditorRowChange(row: R, commitChangesAndFocus = false) {\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.displayCellContent && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={handleKeyDown}\n      onMouseDownCapture={cancelFrameRequest}\n    >\n      {column.renderEditCell != null && (\n        <>\n          {column.renderEditCell({\n            column,\n            row,\n            onRowChange: onEditorRowChange,\n            onClose\n          })}\n          {column.editorOptions?.displayCellContent &&\n            column.renderCell({\n              column,\n              row,\n              isCellEditable: true,\n              tabIndex: -1,\n              onRowChange: onEditorRowChange\n            })}\n        </>\n      )}\n    </div>\n  );\n}\n","import { memo } from 'react';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) &&\n        column.renderGroupCell?.({\n          groupKey,\n          childRows,\n          column,\n          row,\n          isExpanded,\n          tabIndex: childTabIndex,\n          toggleGroup\n        })}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    line-height: var(--rdg-row-height);\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = 'rdg-row-selected';\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      height: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\nimport type { CalculatedColumn, GroupRow, Omit } from './types';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport { cell, cellFrozenLast } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  row: GroupRow<R>;\n  gridRowStart: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectGroup: (rowIdx: number) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nconst groupRow = css`\n  @layer rdg.GroupedRow {\n    &:not([aria-selected='true']) {\n      background-color: var(--rdg-header-background-color);\n    }\n\n    > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n      border-inline-end: none;\n    }\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  gridRowStart,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          {\n            [rowSelectedClassname]: selectedCellIdx === -1\n          }\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { css } from '@linaria/core';\n\nimport type { RenderHeaderCellProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\n\nconst headerSortCell = css`\n  @layer rdg.SortableHeaderCell {\n    cursor: pointer;\n    display: flex;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function renderHeaderCell<R, SR>({\n  column,\n  sortDirection,\n  priority,\n  onSort,\n  tabIndex\n}: RenderHeaderCellProps<R, SR>) {\n  if (!column.sortable) return column.name;\n\n  return (\n    <SortableHeaderCell\n      onSort={onSort}\n      sortDirection={sortDirection}\n      priority={priority}\n      tabIndex={tabIndex}\n    >\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  RenderHeaderCellProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'tabIndex'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  tabIndex\n}: SortableHeaderCellProps<R, SR>) {\n  const renderSortStatus = useDefaultRenderers<R, SR>()!.renderSortStatus!;\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      tabIndex={tabIndex}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{renderSortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { clampColumnWidth, getCellClassname, getCellStyle } from './utils';\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport defaultRenderHeaderCell from './renderHeaderCell';\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n\n    &::after {\n      content: '';\n      cursor: col-resize;\n      position: absolute;\n      inset-block-start: 0;\n      inset-inline-end: 0;\n      inset-block-end: 0;\n      inline-size: 10px;\n    }\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderCellProps<R, SR>) {\n  const isRtl = direction === 'rtl';\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  const renderHeaderCell = column.renderHeaderCell ?? defaultRenderHeaderCell;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right, left } = currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      // prevents text selection in Chrome, which fixes scrolling the grid while dragging, and fixes re-size on an autosized column\n      event.preventDefault();\n      const { right, left } = currentTarget.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, clampColumnWidth(width, column));\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst === true && sortDirection === 'DESC') ||\n        (sortDescendingFirst !== true && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function onDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    const { right, left } = event.currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    onColumnResize(column, 'max-content');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell(0);\n    }\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onDoubleClick={column.resizable ? onDoubleClick : undefined}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {renderHeaderCell({\n        column,\n        sortDirection,\n        priority,\n        onSort,\n        tabIndex: childTabIndex\n      })}\n    </div>\n  );\n}\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { CalculatedColumn, Direction } from './types';\nimport type { DataGridProps } from './DataGrid';\nimport HeaderCell from './HeaderCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowSelectedClassname } from './style/row';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'max-content') => void;\n  selectCell: (columnIdx: number) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    line-height: var(--rdg-header-row-height);\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 0 to show up above regular cells */\n      z-index: 1;\n      position: sticky;\n      inset-block-start: 0;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 2;\n    }\n  }\n`;\n\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n      style={getRowStyle(1)}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, isCellEditable } from './utils';\nimport type { CellRendererProps } from './types';\n\nconst cellCopied = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n\n    &.${cellCopied} {\n      background-color: #9999ff;\n    }\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  rowIdx,\n  dragHandle,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n  const isEditable = isCellEditable(column, row);\n\n  function selectCellWrapper(openEditor?: boolean) {\n    selectCell({ rowIdx, idx: column.idx }, openEditor);\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onClick) {\n      const cellEvent = createCellEvent(event);\n      onClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleContextMenu(event: React.MouseEvent<HTMLDivElement>) {\n    if (onContextMenu) {\n      const cellEvent = createCellEvent(event);\n      onContextMenu({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onDoubleClick) {\n      const cellEvent = createCellEvent(event);\n      onDoubleClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper(true);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isEditable || undefined}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          {column.renderCell({\n            column,\n            row,\n            isCellEditable: isEditable,\n            tabIndex: childTabIndex,\n            onRowChange: handleRowChange\n          })}\n          {dragHandle}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { forwardRef, memo, type RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { CalculatedColumn, RenderRowProps } from './types';\nimport Cell from './Cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RenderRowProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row, rowIdx),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          rowIdx={rowIdx}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onClick={onCellClick}\n          onDoubleClick={onCellDoubleClick}\n          onContextMenu={onCellContextMenu}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nconst RowComponent = memo(forwardRef(Row)) as <R, SR>(\n  props: RenderRowProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRenderRow<R, SR>(key: React.Key, props: RenderRowProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n","import { useRef } from 'react';\n\nimport { useLayoutEffect } from './hooks';\nimport { scrollIntoView } from './utils';\n\nexport interface PartialPosition {\n  readonly idx?: number | undefined;\n  readonly rowIdx?: number | undefined;\n}\n\nexport default function ScrollToCell({\n  scrollToPosition: { idx, rowIdx },\n  gridElement,\n  setScrollToCellPosition\n}: {\n  scrollToPosition: PartialPosition;\n  gridElement: HTMLDivElement;\n  setScrollToCellPosition: (cell: null) => void;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // scroll until the cell is completely visible\n    // this is needed if the grid has auto-sized columns\n    scrollIntoView(ref.current);\n  });\n\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridElement,\n      threshold: 1.0\n    });\n\n    observer.observe(ref.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridElement, setScrollToCellPosition]);\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        gridColumn: idx === undefined ? '1/-1' : idx + 1,\n        gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n      }}\n    />\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderSortIconProps, RenderSortPriorityProps, RenderSortStatusProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function renderSortStatus({ sortDirection, priority }: RenderSortStatusProps) {\n  return (\n    <>\n      {renderSortIcon({ sortDirection })}\n      {renderSortPriority({ priority })}\n    </>\n  );\n}\n\nexport function renderSortIcon({ sortDirection }: RenderSortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function renderSortPriority({ priority }: RenderSortPriorityProps) {\n  return priority;\n}\n","import { css } from '@linaria/core';\n\nimport { row } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  @layer rdg {\n    @layer Defaults,\n      FocusSink,\n      CheckboxInput,\n      CheckboxIcon,\n      CheckboxLabel,\n      Cell,\n      HeaderCell,\n      SummaryCell,\n      EditCell,\n      Row,\n      HeaderRow,\n      SummaryRow,\n      GroupedRow,\n      Root;\n\n    @layer Defaults {\n      *,\n      *::before,\n      *::after {\n        box-sizing: inherit;\n      }\n    }\n\n    @layer Root {\n      ${lightTheme}\n      --rdg-selection-color: #66afe9;\n      --rdg-font-size: 14px;\n\n      display: grid;\n\n      color-scheme: var(--rdg-color-scheme, light dark);\n\n      /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n      /* We set a stacking context so internal elements don't render on top of external elements. */\n      /* size containment is not used as it could break \"width: min-content\" for example, and the grid would infinitely resize on Chromium browsers */\n      contain: content;\n      content-visibility: auto;\n      block-size: 350px;\n      border: 1px solid var(--rdg-border-color);\n      box-sizing: border-box;\n      overflow: auto;\n      background-color: var(--rdg-background-color);\n      color: var(--rdg-color);\n      font-size: var(--rdg-font-size);\n\n      /* needed on Firefox */\n      &::before {\n        content: '';\n        grid-column: 1/-1;\n        grid-row: 1/-1;\n      }\n\n      &.rdg-dark {\n        --rdg-color-scheme: dark;\n        ${darkTheme}\n      }\n\n      &.rdg-light {\n        --rdg-color-scheme: light;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        &:not(.rdg-light) {\n          ${darkTheme}\n        }\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 2 to show up above header row */\n    z-index: 3;\n  }\n`;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CellRendererProps } from './types';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<\n  CellRendererProps<R, SR>,\n  'rowIdx' | 'column' | 'colSpan' | 'isCellSelected' | 'selectCell'\n>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell({ rowIdx, idx: column.idx });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.renderSummaryCell?.({ column, row, tabIndex: childTabIndex })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { RenderRowProps } from './types';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowClassname, rowSelectedClassname } from './style/row';\nimport SummaryCell from './SummaryCell';\n\ntype SharedRenderRowProps<R, SR> = Pick<\n  RenderRowProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart' | 'selectCell'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRenderRowProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  isTop: boolean;\n  showBorder: boolean;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    line-height: var(--rdg-summary-row-height);\n\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 1;\n    }\n\n    > .${cellFrozen} {\n      z-index: 2;\n    }\n  }\n`;\n\nexport const topSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-end: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nexport const bottomSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-start: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nconst topSummaryRowClassname = `rdg-top-summary-row ${topSummaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  showBorder,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [topSummaryRowClassname]: isTop,\n          [topSummaryRowBorderClassname]: isTop && showBorder,\n          [bottomSummaryRowBorderClassname]: !isTop && showBorder,\n          'rdg-bottom-summary-row': !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { forwardRef, useCallback, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport type { Key, KeyboardEvent, RefAttributes } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  RowSelectionChangeProvider,\n  RowSelectionProvider,\n  useCalculatedColumns,\n  useColumnWidths,\n  useGridDimensions,\n  useLatestFunc,\n  useLayoutEffect,\n  useViewportColumns,\n  useViewportRows\n} from './hooks';\nimport {\n  abs,\n  assertIsValidKeyGetter,\n  canExitGrid,\n  createCellEvent,\n  getColSpan,\n  getNextSelectedCellPosition,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  isSelectedCellEditable,\n  renderMeasuringCells,\n  scrollIntoView,\n  sign\n} from './utils';\nimport type {\n  CalculatedColumn,\n  CellClickArgs,\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  CellMouseEvent,\n  CellNavigationMode,\n  Column,\n  CopyEvent,\n  Direction,\n  FillEvent,\n  Maybe,\n  PasteEvent,\n  Position,\n  Renderers,\n  RowHeightArgs,\n  RowsChangeData,\n  SelectRowEvent,\n  SortColumn\n} from './types';\nimport { renderCheckbox as defaultRenderCheckbox } from './cellRenderers';\nimport {\n  DataGridDefaultRenderersProvider,\n  useDefaultRenderers\n} from './DataGridDefaultRenderersProvider';\nimport DragHandle from './DragHandle';\nimport EditCell from './EditCell';\nimport GroupRowRenderer from './GroupRow';\nimport HeaderRow from './HeaderRow';\nimport { defaultRenderRow } from './Row';\nimport type { PartialPosition } from './ScrollToCell';\nimport ScrollToCell from './ScrollToCell';\nimport { default as defaultRenderSortStatus } from './sortStatus';\nimport { focusSinkClassname, rootClassname, viewportDraggingClassname } from './style/core';\nimport { rowSelected, rowSelectedWithFrozenCell } from './style/row';\nimport SummaryRow from './SummaryRow';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'renderCell' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable'\n>;\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToCell: (position: PartialPosition) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the top of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  groupBy?: Maybe<readonly string[]>;\n  rowGrouper?: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds?: Maybe<ReadonlySet<unknown>>;\n  onExpandedGroupIdsChange?: Maybe<(expandedGroupIds: Set<unknown>) => void>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onCopy?: Maybe<(event: CopyEvent<R>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a cell is clicked */\n  onCellClick?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  /** Function called whenever a cell is double clicked */\n  onCellDoubleClick?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  /** Function called whenever a cell is right clicked */\n  onCellContextMenu?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  onCellKeyDown?: Maybe<(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  renderers?: Maybe<Renderers<R, SR>>;\n  rowClass?: Maybe<(row: R, rowIdx: number) => Maybe<string>>;\n  /** @default 'ltr' */\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  props: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Event props\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    enableVirtualization: rawEnableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction: rawDirection,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  } = props;\n\n  /**\n   * defaults\n   */\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const renderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const renderSortStatus =\n    renderers?.renderSortStatus ?? defaultRenderers?.renderSortStatus ?? defaultRenderSortStatus;\n  const renderCheckbox =\n    renderers?.renderCheckbox ?? defaultRenderers?.renderCheckbox ?? defaultRenderCheckbox;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n\n  const headerRowsCount = 1;\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [resizedColumnWidths, setResizedColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [measuredColumnWidths, setMeasuredColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [selectedPosition, setSelectedPosition] = useState(\n    (): SelectCellState | EditCellState<R> => ({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' })\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState<PartialPosition | null>(null);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const rowRef = useRef<HTMLDivElement>(null);\n  const shouldFocusCellRef = useRef(false);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      renderCheckbox,\n      renderSortStatus\n    }),\n    [renderCheckbox, renderSortStatus]\n  );\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    measuredColumnWidths,\n    resizedColumnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    isGroupRow\n  });\n\n  const { gridTemplateColumns, handleColumnResize } = useColumnWidths(\n    columns,\n    viewportColumns,\n    templateColumns,\n    gridRef,\n    gridWidth,\n    resizedColumnWidths,\n    measuredColumnWidths,\n    setResizedColumnWidths,\n    setMeasuredColumnWidths,\n    onColumnResize\n  );\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectGroupLatest = useLatestFunc((rowIdx: number) => {\n    selectCell({ rowIdx, idx: -1 });\n  });\n  const selectHeaderCellLatest = useLatestFunc((idx: number) => {\n    selectCell({ rowIdx: minRowIdx, idx });\n  });\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n\n    if (selectedPosition.idx === -1) {\n      rowRef.current!.focus({ preventScroll: true });\n      scrollIntoView(rowRef.current);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (!shouldFocusCellRef.current) return;\n    shouldFocusCellRef.current = false;\n    const cell = getCellToScroll(gridRef.current!);\n    if (cell === null) return;\n\n    scrollIntoView(cell);\n    // Focus cell content when available instead of the cell itself\n    const elementToFocus = cell.querySelector<Element & HTMLOrSVGElement>('[tabindex=\"0\"]') ?? cell;\n    elementToFocus.focus({ preventScroll: true });\n  });\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToCell({ idx, rowIdx }) {\n      const scrollToIdx =\n        idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx =\n        rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({ idx: scrollToIdx, rowIdx: scrollToRowIdx });\n      }\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow(args: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n\n    if (args.type === 'HEADER') {\n      const newSelectedRows = new Set(selectedRows);\n      for (const row of rawRows) {\n        const rowKey = rowKeyGetter(row);\n        if (args.checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const { row, checked, isShiftClick } = args;\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: KeyboardEvent<HTMLDivElement>) {\n    const { idx, rowIdx, mode } = selectedPosition;\n    if (mode === 'EDIT') return;\n\n    const row = rows[rowIdx];\n    if (!isGroupRow(row) && onCellKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown(\n        {\n          mode: 'SELECT',\n          row,\n          column: columns[idx],\n          rowIdx,\n          selectCell\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = hasGroups && event.target === rowRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { key, keyCode } = event;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event) &&\n      !isGroupRow(rows[rowIdx])\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (\n      isRowIdxWithinViewportBounds(rowIdx) &&\n      isGroupRow(row) &&\n      selectedPosition.idx === -1 &&\n      // Collapse the current group row if it is focused and is in expanded state\n      ((key === leftKey && row.isExpanded) ||\n        // Expand the current group row if it is focused and is in collapsed state\n        (key === rightKey && !row.isExpanded))\n    ) {\n      event.preventDefault(); // Prevents scrolling\n      toggleGroup(row.id);\n      return;\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[getRawRowIdx(rowIdx)];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ type: 'ROW', row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (isSamePosition(selectedPosition, position)) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(getCellToScroll(gridRef.current!));\n    } else {\n      shouldFocusCellRef.current = true;\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (key === leftKey && isRowSelected && isGroupRow(row) && !row.isExpanded && row.level !== 0) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let cellNavigationMode: CellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n\n    // Do not allow focus to leave and prevent scrolling\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (\n      selectedPosition.rowIdx !== rowIdx ||\n      selectedPosition.mode === 'EDIT' ||\n      hasGroups || // drag fill is not supported when grouping is enabled\n      onFill == null\n    ) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rawRows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = (shouldFocusCell: boolean) => {\n      shouldFocusCellRef.current = shouldFocusCell;\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges: boolean, shouldFocusCell: boolean) => {\n      if (commitChanges) {\n        // Prevents two issues when editor is closed by clicking on a different cell\n        //\n        // Otherwise commitEditorChanges may be called before the cell state is changed to\n        // SELECT and this results in onRowChange getting called twice.\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor(shouldFocusCell);\n        });\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor(false);\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        onKeyDown={onCellKeyDown}\n        navigate={navigate}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    const selectedColumn = columns[selectedPosition.idx];\n    if (\n      // idx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n    let startRowIndex = 0;\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      // selectedIdx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        let isGroupRowSelected = false;\n        if (isSelectable) {\n          assertIsValidKeyGetter<R, K>(rowKeyGetter);\n          isGroupRowSelected = row.childRows.every((cr) => selectedRows.has(rowKeyGetter(cr)));\n        }\n\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerAndTopSummaryRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={rowColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            row={row}\n            gridRowStart={gridRowStart}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n            isRowSelected={isGroupRowSelected}\n            selectGroup={selectGroupLatest}\n            toggleGroup={toggleGroupLatest}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(\n        renderRow(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex': headerAndTopSummaryRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelected,\n          onCellClick: onCellClickLatest,\n          onCellDoubleClick: onCellDoubleClickLatest,\n          onCellContextMenu: onCellContextMenuLatest,\n          rowClass,\n          gridRowStart,\n          height: getRowHeight(rowIdx),\n          copiedCellIdx:\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined,\n\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectCellLatest,\n          selectedCellDragHandle: getDragHandle(rowIdx),\n          selectedCellEditor: getCellEditor(rowIdx)\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `${headerRowHeight}px`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused =\n    selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            isRowIdxWithinViewportBounds(selectedPosition.rowIdx) ||\n            scrollToPosition?.rowIdx !== undefined\n              ? `${headerRowHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateColumns,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-summary-row-height': `${summaryRowHeight}px`,\n          '--rdg-sign': isRtl ? -1 : 1,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      {/* extra div is needed for row navigation in a treegrid */}\n      {hasGroups && (\n        <div\n          ref={rowRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n          }}\n        />\n      )}\n      {scrollToPosition !== null && (\n        <ScrollToCell\n          scrollToPosition={scrollToPosition}\n          setScrollToCellPosition={setScrollToPosition}\n          gridElement={gridRef.current!}\n        />\n      )}\n      <DataGridDefaultRenderersProvider value={defaultGridComponents}>\n        <RowSelectionChangeProvider value={selectRowLatest}>\n          <RowSelectionProvider value={allRowsSelected}>\n            <HeaderRow\n              columns={getRowViewportColumns(-1)}\n              onColumnResize={handleColumnResizeLatest}\n              sortColumns={sortColumns}\n              onSortColumnsChange={onSortColumnsChangeLatest}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n              selectedCellIdx={\n                selectedPosition.rowIdx === minRowIdx ? selectedPosition.idx : undefined\n              }\n              selectCell={selectHeaderCellLatest}\n              shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n              direction={direction}\n            />\n          </RowSelectionProvider>\n          {rows.length === 0 && noRowsFallback ? (\n            noRowsFallback\n          ) : (\n            <>\n              {topSummaryRows?.map((row, rowIdx) => {\n                const gridRowStart = headerRowsCount + rowIdx + 1;\n                const summaryRowIdx = rowIdx + minRowIdx + 1;\n                const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                const top = headerRowHeight + summaryRowHeight * rowIdx;\n\n                return (\n                  <SummaryRow\n                    aria-rowindex={gridRowStart}\n                    key={rowIdx}\n                    rowIdx={summaryRowIdx}\n                    gridRowStart={gridRowStart}\n                    row={row}\n                    top={top}\n                    bottom={undefined}\n                    viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                    lastFrozenColumnIndex={lastFrozenColumnIndex}\n                    selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                    isTop\n                    showBorder={rowIdx === topSummaryRowsCount - 1}\n                    selectCell={selectCellLatest}\n                  />\n                );\n              })}\n              {getViewportRows()}\n              {bottomSummaryRows?.map((row, rowIdx) => {\n                const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n                const summaryRowIdx = rows.length + rowIdx;\n                const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                const top =\n                  clientHeight > totalRowHeight\n                    ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                    : undefined;\n                const bottom =\n                  top === undefined\n                    ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                    : undefined;\n\n                return (\n                  <SummaryRow\n                    aria-rowindex={headerAndTopSummaryRowsCount + rowsCount + rowIdx + 1}\n                    key={rowIdx}\n                    rowIdx={summaryRowIdx}\n                    gridRowStart={gridRowStart}\n                    row={row}\n                    top={top}\n                    bottom={bottom}\n                    viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                    lastFrozenColumnIndex={lastFrozenColumnIndex}\n                    selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                    isTop={false}\n                    showBorder={rowIdx === 0}\n                    selectCell={selectCellLatest}\n                  />\n                );\n              })}\n            </>\n          )}\n        </RowSelectionChangeProvider>\n\n        {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n        {renderMeasuringCells(viewportColumns)}\n      </DataGridDefaultRenderersProvider>\n    </div>\n  );\n}\n\nlet getCellToScrollExpression: XPathExpression | undefined;\n\nfunction getCellToScroll(gridEl: HTMLDivElement) {\n  getCellToScrollExpression ??= document.createExpression('div[@role=\"row\"]/div[@tabindex=\"0\"]');\n  // XPathResult.ANY_UNORDERED_NODE_TYPE === 8\n  return getCellToScrollExpression.evaluate(gridEl, 8).singleNodeValue as HTMLDivElement | null;\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { css } from '@linaria/core';\n\nimport type { RenderEditCellProps } from '../types';\n\nconst textEditorInternalClassname = css`\n  @layer rdg.TextEditor {\n    appearance: none;\n\n    box-sizing: border-box;\n    inline-size: 100%;\n    block-size: 100%;\n    padding-block: 0;\n    padding-inline: 6px;\n    border: 2px solid #ccc;\n    vertical-align: top;\n    color: var(--rdg-color);\n    background-color: var(--rdg-background-color);\n\n    font-family: inherit;\n    font-size: var(--rdg-font-size);\n\n    &:focus {\n      border-color: var(--rdg-selection-color);\n      outline: none;\n    }\n\n    &::placeholder {\n      color: #999;\n      opacity: 1;\n    }\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function textEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: RenderEditCellProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true, false)}\n    />\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}